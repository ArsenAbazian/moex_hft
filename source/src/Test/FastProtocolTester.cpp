#include <stdio.h>
#include <stdlib.h>
#include <exception>
#include <stdexcept>
#include <limits.h>
#include "../../include/Fast/FastProtocolManager.h"
#include "../../include/Test/FastProtocolTester.h"
#include <sys/time.h>
#include <chrono>
#include "../../include/Lib/StringIdComparer.h"
#include "../../include/Stopwatch.h"
#include "../../include/Feeds/FeedTypes.h"
#include "../../include/Managers/DebugInfoManager.h"

#ifdef TEST
FastProtocolTester::FastProtocolTester() {
    this->manager = new FastProtocolManager(new AstsObjectsAllocationInfo(128), new FortsObjectsAllocationInfo(128));
}


FastProtocolTester::~FastProtocolTester() {
    delete this->manager;
}

void FastProtocolTester::TestSkipToNextField() {
    /*
    unsigned char data[16];
    data[0] = 0xff;

    this->manager->SetNewBuffer(data, 16);
    this->manager->ResetBuffer();
    this->manager->SkipToNextField();
    if(this->manager->MessageLength() != 1)
        throw;

    for(int i = 1; i < 16; i++) {
        data[i] = 0xff;
        data[i - 1] = (unsigned char)(rand() & 0x7f);
        this->manager->ResetBuffer();
        this->manager->SkipToNextField();
        if(this->manager->MessageLength() != i + 1)
            throw;
    }

    Stopwatch *w = new Stopwatch();
    w->Start();
    for(int i = 1; i < 16; i++) {
        data[i] = 0xff;
        data[i - 1] = (unsigned char)(rand() & 0x7f);
        w->Reset();
        for(int j = 0; j < 10000000; j++) {
            this->manager->ResetBuffer();
            this->manager->SkipToNextField();
        }
        time_t mic = w->ElapsedNanosecondsSlow();

        w->Reset();
        for(int j = 0; j < 10000000; j++) {
            this->manager->ResetBuffer();
            this->manager->SkipToNextFieldSlow();
        }
        time_t mic2 = w->ElapsedNanosecondsSlow();

        printf("%d bytes fast = %" PRIu64 " slow = %" PRIu64 "\n", i, mic, mic2);
    }*/
}

void FastProtocolTester::TestPerformance() {

    const char *olr_curr[311] = {
            "48 ad 00 00 c0 1c 9a 02 5a c8 02 2e 72 34 50 71 35 1a f2 81 77 98 83 b1 31 34 32 33 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 bf 22 15 34 f1 22 03 fc fd 03 54 b3 43 45 54 d3 ce",
            "49 ad 00 00 c0 1c 9a 02 5a c9 02 2e 72 34 50 71 37 05 db 81 77 98 83 b1 31 34 32 33 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 c0 22 15 34 f1 23 5b e5 fd 03 54 b3 43 45 54 d3 ce",
            "4a ad 00 00 c0 1c 9a 02 5a ca 02 2e 72 34 50 71 3e 31 ff 82 77 98 83 b1 31 34 32 33 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 c1 22 15 34 f1 2b 43 cc fd 03 54 b3 43 45 54 d3 ce 53 e0 81 32 39 39 36 b2 55 53 44 30 30 30 54 4f 44 54 4f cd 02 a3 2b 08 ad fc 04 c3 81 00 c9 cf",
            "4b ad 00 00 c0 1c 9a 02 5a cb 02 2e 72 34 50 71 43 71 f5 82 77 98 83 b1 31 34 32 33 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 c2 22 15 34 f1 31 20 bf fd 03 54 b3 43 45 54 d3 ce 63 e0 81 b0 32 39 39 36 b3 01 10 c3 32 05 ee fd 03 2e 85 81 01 fe cf",
            "4c ad 00 00 c0 1c 9a 02 5a cc 02 2e 72 34 50 71 47 47 f7 82 77 98 83 b1 31 34 32 33 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 c4 22 15 34 f1 34 2f af fd 03 54 b3 43 45 54 d3 ce 93 31 34 32 33 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 b9 34 56 80 fc 26 1d 95",
            "4d ad 00 00 c0 1c 9a 02 5a cd 02 2e 72 34 50 71 4e 71 fd 81 77 98 83 b1 31 34 32 34 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 ba 22 15 34 f1 3b 45 96 fc 26 1d 95 43 45 54 d3 ce",
            "4e ad 00 00 c0 1c 9a 02 5a ce 02 2e 72 34 50 71 61 1e ff 83 77 98 83 b0 31 34 32 31 b8 48 4b 44 52 55 42 5f 54 4f cd 05 a0 22 15 3c d9 11 20 8d fc 04 31 ac 43 45 54 d3 ce b3 b1 31 34 32 34 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 bb 11 67 95 fc 26 1d 95 63 e0 81 b0 32 39 39 36 b4 00 57 bc 12 19 d7 82 86 81 01 f9 cf",
            "4f ad 00 00 c0 1c 9a 02 5a cf 02 2e 72 34 50 71 64 73 bc 81 77 98 83 b1 31 34 32 34 b5 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 bd 22 15 3c d9 15 60 a2 fc 26 1d 95 43 45 54 d3 ce",
            "50 ad 00 00 c0 1c 9a 02 5a d0 02 2e 72 34 50 71 68 49 8f 81 77 98 83 b1 31 34 32 34 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 c5 22 15 3c d9 18 01 ed fd 03 54 b3 43 45 54 d3 ce",
            "51 ad 00 00 c0 1c 9a 02 5a d1 02 2e 72 34 50 71 6a 33 d9 81 77 98 83 b0 31 34 32 32 b0 45 55 52 55 53 44 30 30 30 54 4f c4 03 f8 22 15 3c d9 1a 30 8f fb 06 31 9d 43 45 54 d3 ce",
            "52 ad 00 00 c0 1c 9a 02 5a d2 02 2e 72 34 50 71 6c 1e d2 81 77 f8 81 b1 32 39 39 36 b5 43 4e 59 52 55 42 5f 54 4f cd 06 c3 22 15 3c d9 1d 17 e8 fc 05 13 df 81 01 ee cf 43 45 54 d3 ce",
            "53 ad 00 00 c0 1c 9a 02 5a d3 02 2e 72 34 50 71 6f 74 93 81 77 f8 81 b0 32 39 39 36 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 c6 22 15 3c d9 20 11 ae fd 03 2e 85 81 01 fe cf 43 45 54 d3 ce",
            "54 ad 00 00 c0 1c 9a 02 5a d4 02 2e 72 34 50 71 73 49 d5 81 77 98 83 b1 31 34 32 34 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 c7 22 15 3c d9 23 69 c3 fd 03 54 b3 43 45 54 d3 ce",
            "55 ad 00 00 c0 1c 9a 02 5a d5 02 2e 72 34 50 71 77 1f a9 81 77 f8 81 b0 32 39 39 36 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 c8 22 15 3c d9 28 2a da fd 03 2e 85 81 01 fe cf 43 45 54 d3 ce",
            "56 ad 00 00 c0 1c 9a 02 5a d6 02 2e 72 34 50 71 79 09 f6 81 77 98 83 b1 31 34 32 34 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 c9 22 15 3c d9 29 6e 8d fd 03 54 b3 43 45 54 d3 ce",
            "57 ad 00 00 c0 1c 9a 02 5a d7 02 2e 72 34 50 72 05 76 85 81 77 f8 81 b0 32 39 39 36 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 ca 22 15 3c d9 35 6e ca fd 03 2e 85 81 01 fe cf 43 45 54 d3 ce",
            "58 ad 00 00 c0 1c 9a 02 5a d8 02 2e 72 34 50 72 07 60 99 81 77 98 83 b0 31 34 32 32 b1 43 48 46 52 55 42 5f 54 4f c4 06 89 22 15 3c d9 37 35 e9 fd 03 2d fb 43 45 54 d3 ce",
            "59 ad 00 00 c0 1c 9a 02 5a d9 02 2e 72 34 50 72 09 4b ab 81 77 f8 81 b0 32 39 39 36 b9 53 4c 56 52 55 42 5f 54 4f cd 04 ee 22 15 3c d9 3a 30 d9 fe 18 bd 81 03 91 cf 43 45 54 d3 ce",
            "5a ad 00 00 c0 1c 9a 02 5a da 02 2e 72 34 50 72 18 22 c4 83 77 f8 81 b1 32 39 39 37 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 be 22 15 44 c1 0b 44 ee fd 03 5d b1 81 01 97 cf 43 45 54 d3 ce 03 c0 32 39 39 37 b1 00 57 bf 0b 54 82 fc 26 56 cb 81 02 ad 33 c0 b0 32 39 39 37 b2 55 53 44 30 30 30 30 30 30 54 4f c4 06 d3 0b 76 c1 fe 2c 9f 81 13 d7",
            "5b ad 00 00 c0 1c 9a 02 5a db 02 2e 72 34 50 72 1a 0c e3 82 77 98 83 b0 31 34 32 32 b2 43 48 46 52 55 42 5f 54 4f c4 06 8a 22 15 44 c1 0d 15 fe fd 03 2d fb 43 45 54 d3 ce 53 e0 81 32 39 39 37 b3 55 53 44 30 30 30 30 30 30 54 4f c4 06 d4 0e 19 a6 fe 2c 9f 81 13 d7 cf",
            "5c ad 00 00 c0 1c 9a 02 5a dc 02 2e 72 34 50 72 1f 4c c1 81 77 98 83 b1 31 34 32 35 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 c0 22 15 44 c1 12 26 a8 fc 26 76 9d 43 45 54 d3 ce",
            "5d ad 00 00 c0 1c 9a 02 5a dd 02 2e 72 34 50 72 2e 22 c7 81 77 98 83 b1 31 34 32 35 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 cb 22 15 44 c1 22 13 b9 fc 24 44 af 43 45 54 d3 ce",
            "5e ad 00 00 c0 1c 9a 02 5a de 02 2e 72 34 50 72 30 0d a5 81 77 98 83 b1 31 34 32 35 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 cc 22 15 44 c1 23 6b c9 fc 24 44 af 43 45 54 d3 ce",
            "5f ad 00 00 c0 1c 9a 02 5a df 02 2e 72 34 50 72 37 38 fb 81 77 98 83 b1 31 34 32 35 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 cd 22 15 44 c1 2b 4e bb fc 24 44 af 43 45 54 d3 ce",
            "60 ad 00 00 c0 1c 9a 02 5a e0 02 2e 72 34 50 72 3e 64 b4 82 77 98 83 b1 31 34 32 35 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 ce 22 15 44 c1 31 2c 93 fc 24 44 af 43 45 54 d3 ce 82 31 34 32 35 b6 01 10 cf 32 19 bf",
            "61 ad 00 00 c0 1c 9a 02 5a e1 02 2e 72 34 50 72 40 50 8e 83 77 98 83 b1 31 34 32 32 b4 47 42 50 52 55 42 5f 54 4f cd 06 ad 22 15 44 c1 34 09 fe fd 04 3c 9d 43 45 54 d3 ce 93 31 34 32 35 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d0 34 37 fe fc 24 44 af 73 e0 81 b0 32 39 39 37 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 c1 34 62 94 fd 03 4e a7 81 03 d5 cf",
            "62 ad 00 00 c0 1c 9a 02 5a e2 02 2e 72 34 50 72 46 0e fa 81 77 98 83 b1 31 34 32 32 b6 45 55 52 5f 52 55 42 5f 5f 54 4f c4 06 89 22 15 44 c1 3a 1e 83 fc 26 59 db 43 45 54 d3 ce",
            "63 ad 00 00 c0 1c 9a 02 5a e3 02 2e 72 34 50 72 47 7a f6 82 77 98 83 b1 31 34 32 32 b7 45 55 52 5f 52 55 42 5f 5f 54 4f c4 06 8a 22 15 44 c1 3b 03 92 fc 26 59 db 43 45 54 d3 ce 93 31 34 32 35 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 c2 3b 4d 91 fc 26 76 9d",
            "64 ad 00 00 c0 1c 9a 02 5a e4 02 2e 72 34 50 72 4b 4f c7 81 77 98 83 b1 31 34 32 32 b8 47 42 50 52 55 42 5f 54 4f cd 06 ae 22 15 4c a9 01 07 8f fd 04 3c 9d 43 45 54 d3 ce",
            "65 ad 00 00 c0 1c 9a 02 5a e5 02 2e 72 34 50 72 5c 10 dd 82 77 f8 81 b0 32 39 39 37 b5 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 c3 22 15 4c a9 11 7b 91 fe 2e c5 82 a1 cf 43 45 54 d3 ce 23 c0 b1 32 39 39 37 b6 00 57 c4 12 36 e4 fe 30 c1 81 01 8a",
            "66 ad 00 00 c0 1c 9a 02 5a e6 02 2e 72 34 50 72 5f 65 ab 81 77 f8 81 b0 32 39 39 37 b7 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 c5 22 15 4c a9 15 6f f3 81 bd 82 97 cf 43 45 54 d3 ce",
            "67 ad 00 00 c0 1c 9a 02 5a e7 02 2e 72 34 50 72 61 50 d8 81 77 98 83 b1 31 34 32 36 b0 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d1 22 15 4c a9 18 18 fb fc 24 44 af 43 45 54 d3 ce",
            "68 ad 00 00 c0 1c 9a 02 5a e8 02 2e 72 34 50 72 6a 66 c9 81 77 98 83 b1 31 34 32 36 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d2 22 15 4c a9 20 31 80 fc 24 44 af 43 45 54 d3 ce",
            "69 ad 00 00 c0 1c 9a 02 5a e9 02 2e 72 34 50 72 6e 3c b0 81 77 98 83 b1 31 34 32 36 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d3 22 15 4c a9 23 74 c8 fc 24 44 af 43 45 54 d3 ce",
            "6a ad 00 00 c0 1c 9a 02 5a ea 02 2e 72 34 50 72 72 11 c6 81 77 98 83 b1 31 34 32 36 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d4 22 15 4c a9 28 49 f4 fc 24 44 af 43 45 54 d3 ce",
            "6b ad 00 00 c0 1c 9a 02 5a eb 02 2e 72 34 50 72 73 7c e9 81 77 98 83 b1 31 34 32 36 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d5 22 15 4c a9 29 79 d4 fc 24 44 af 43 45 54 d3 ce",
            "6c ad 00 00 c0 1c 9a 02 5a ec 02 2e 72 34 50 72 77 53 85 82 77 f8 81 b0 32 39 39 37 b8 45 55 52 52 55 42 5f 53 50 d4 06 a5 22 15 4c a9 2e 2c 9c fe 2e 85 81 00 fd cf 43 45 54 d3 ce 33 c0 b1 32 39 39 37 b9 47 4c 44 52 55 42 5f 54 4f cd 06 90 2e 5e f2 fe 0e 27 d4 81 02 9f",
            "6d ad 00 00 c0 1c 9a 02 5a ed 02 2e 72 34 50 72 7d 12 d4 81 77 f8 81 b0 32 39 39 38 b0 43 4e 59 30 30 30 30 30 30 54 4f c4 06 89 22 15 4c a9 33 53 ca fc 04 61 a1 81 00 eb cf 43 45 54 d3 ce",
            "6e ad 00 00 c0 1c 9a 02 5a ee 02 2e 72 34 50 72 7e 7e e7 82 77 98 83 b1 31 34 32 36 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d6 22 15 4c a9 36 0d ec fc 24 44 af 43 45 54 d3 ce 73 e0 81 b0 32 39 39 38 b1 43 4e 59 30 30 30 30 30 30 54 4f c4 06 8a 35 2a ee fc 04 6d 87 81 03 c3 cf",
            "6f ad 00 00 c0 1c 9a 02 5a ef 02 2e 72 34 50 73 13 14 ef 81 77 f8 81 b0 32 39 39 38 b2 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 c6 22 15 54 91 0b 6d 9b fc 24 45 93 81 01 8d cf 43 45 54 d3 ce",
            "70 ad 00 00 c0 1c 9a 02 5a f0 02 2e 72 34 50 73 1f 7f a2 81 77 98 83 b0 31 34 32 34 b0 45 55 52 55 53 44 30 30 30 54 4f cd 06 f1 22 15 54 91 19 67 c4 fc 00 51 ae 43 45 54 d3 ce",
            "71 ad 00 00 c0 1c 9a 02 5a f1 02 2e 72 34 50 73 29 15 b4 81 77 98 83 b0 31 34 32 34 b2 45 55 52 55 53 44 30 30 30 54 4f cd 06 f2 22 15 54 91 23 25 9b fc 00 51 ae 43 45 54 d3 ce",
            "72 ad 00 00 c0 1c 9a 02 5a f2 02 2e 72 34 50 73 39 56 d9 81 77 98 83 b1 31 34 32 37 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d7 22 15 54 91 32 2d c8 fc 23 73 f3 43 45 54 d3 ce",
            "73 ad 00 00 c0 1c 9a 02 5a f3 02 2e 72 34 50 73 3b 41 ea 81 77 f8 81 b0 32 39 39 38 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 c7 22 15 54 91 34 7e e2 81 bd 82 97 cf 43 45 54 d3 ce",
            "74 ad 00 00 c0 1c 9a 02 5a f4 02 2e 72 34 50 73 46 42 b0 81 77 98 83 b0 31 34 32 34 b9 43 48 46 52 55 42 5f 54 4f cd 03 8d 22 15 5b f9 02 58 9f fc 21 03 93 43 45 54 d3 ce",
            "75 ad 00 00 c0 1c 9a 02 5a f5 02 2e 72 34 50 73 55 18 95 81 77 f8 81 b0 32 39 39 38 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 c8 22 15 5b f9 12 1a ab fd 03 4e a7 81 03 d5 cf 43 45 54 d3 ce",
            "76 ad 00 00 c0 1c 9a 02 5a f6 02 2e 72 34 50 73 57 03 c1 81 77 98 83 b1 31 34 32 37 b2 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 c9 22 15 5b f9 12 48 b4 fd 03 5e f9 43 45 54 d3 ce",
            "77 ad 00 00 c0 1c 9a 02 5a f7 02 2e 72 34 50 73 5a 58 cf 81 77 f8 81 b0 32 39 39 38 b5 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 ca 22 15 5b f9 16 01 80 fd 03 57 c3 81 00 ef cf 43 45 54 d3 ce",
            "78 ad 00 00 c0 1c 9a 02 5a f8 02 2e 72 34 50 73 60 18 ec 81 77 f8 81 b1 32 39 39 38 b6 47 42 50 52 55 42 5f 54 4f c4 06 be 22 15 5b f9 1b 75 dc fe 3a d4 81 01 e2 cf 43 45 54 d3 ce",
            "79 ad 00 00 c0 1c 9a 02 5a f9 02 2e 72 34 50 73 63 6d fb 81 77 98 83 b1 31 34 32 37 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d8 22 15 5b f9 20 48 ac fc 23 73 f3 43 45 54 d3 ce",
            "7a ad 00 00 c0 1c 9a 02 5a fa 02 2e 72 34 50 73 6d 03 b4 81 77 98 83 b1 31 34 32 37 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 d9 22 15 5b f9 28 5b 84 fc 23 73 f3 43 45 54 d3 ce",
            "7b ad 00 00 c0 1c 9a 02 5a fb 02 2e 72 34 50 73 79 6f c0 81 77 98 83 b1 31 34 32 37 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 da 22 15 5b f9 36 24 f3 fc 23 73 f3 43 45 54 d3 ce",
            "7c ad 00 00 c0 1c 9a 02 5a fc 02 2e 72 34 51 07 0c 3a bf 81 77 f8 81 b0 32 39 39 38 b7 55 41 48 30 30 30 30 30 30 54 4f cd 02 92 22 18 1c a1 02 09 c4 fc 0a 51 91 81 01 de cf 43 45 54 d3 ce",
            "7d ad 00 00 c0 1c 9a 02 5a fd 02 2e 72 34 51 07 10 0e e4 81 77 98 83 b1 31 34 32 35 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 cb 22 18 1c a1 05 58 91 fe 31 b4 43 45 54 d3 ce",
            "7e ad 00 00 c0 1c 9a 02 5a fe 02 2e 72 34 51 07 15 4f 9e 81 77 f8 81 b1 32 39 39 38 b8 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 cc 22 18 1c a1 0b 7e c1 fc 26 5a f1 81 02 c9 cf 43 45 54 d3 ce",
            "7f ad 00 00 c0 1c 9a 02 5a ff 02 2e 72 34 51 07 1b 0f c7 81 77 98 83 b1 31 34 32 35 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 cd 22 18 1c a1 10 46 85 fe 31 b4 43 45 54 d3 ce",
            "80 ad 00 00 c0 1c 9a 02 5b 80 02 2e 72 34 51 07 1c 7a 97 81 77 98 83 b0 31 34 32 37 b8 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 ce 22 18 1c a1 12 45 ed fe 2e a1 43 45 54 d3 ce",
            "81 ad 00 00 c0 1c 9a 02 5b 81 02 2e 72 34 51 07 24 25 8a 81 77 f8 81 b1 32 39 39 38 b9 45 55 52 52 55 42 5f 30 36 31 b7 06 bf 22 18 1c a1 19 09 df ff 04 ed 81 86 cf 46 55 54 d3 ce",
            "82 ad 00 00 c0 1c 9a 02 5b 82 02 2e 72 34 51 07 27 7a c0 81 77 f8 81 b1 32 39 39 39 b0 45 55 52 52 55 42 5f 30 36 31 b7 06 c0 22 18 1c a1 1e 02 a1 fe 32 93 81 8c cf 46 55 54 d3 ce",
            "83 ad 00 00 c0 1c 9a 02 5b 83 02 2e 72 34 51 07 2d 3b c2 82 77 98 83 b0 31 34 32 37 b9 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 db 22 18 1c a1 22 34 d7 fc 21 62 ed 43 45 54 d3 ce 82 31 34 32 38 b0 01 10 dc 24 03 d9",
            "84 ad 00 00 c0 1c 9a 02 5b 84 02 2e 72 34 51 07 36 50 eb 81 77 98 83 b0 31 34 32 38 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 dd 22 18 1c a1 2b 65 b2 fc 21 62 ed 43 45 54 d3 ce",
            "85 ad 00 00 c0 1c 9a 02 5b 85 02 2e 72 34 51 07 3c 11 f6 83 77 98 83 b0 31 34 32 38 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 de 22 18 1c a1 31 4f 92 fc 21 62 ed 43 45 54 d3 ce 53 f0 81 32 39 39 39 b1 55 53 44 52 55 42 5f 30 36 31 b7 07 a3 31 78 b6 fe 2c b7 81 88 cf 46 55 54 d3 33 d0 b1 32 39 39 39 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 df 32 38 ee fe 2e 99 81 03 99 43 45 54 d3",
            "86 ad 00 00 c0 1c 9a 02 5b 86 02 2e 72 34 51 07 3f 67 8a 82 77 98 83 b0 31 34 32 38 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e0 22 18 1c a1 34 5f c4 fc 21 62 ed 43 45 54 d3 ce 93 31 34 32 38 b5 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 cf 35 0f 99 fe 2e a1",
            "87 ad 00 00 c0 1c 9a 02 5b 87 02 2e 72 34 51 07 43 3c cf 82 77 f8 81 b1 32 39 39 39 b3 45 55 52 55 53 44 30 30 30 54 4f c4 03 f9 22 18 1c a1 39 16 ac fc 00 53 c1 81 02 d5 cf 43 45 54 d3 ce 13 c0 32 39 39 39 b4 43 4e 59 52 55 42 5f 54 4f cd 06 c4 39 48 84 fc 05 02 d2 81 02 9f",
            "88 ad 00 00 c0 1c 9a 02 5b 88 02 2e 72 34 51 07 45 26 cb 81 77 98 83 b0 31 34 32 38 b6 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 d0 22 18 1c a1 3b 67 ce fe 2e a1 43 45 54 d3 ce",
            "89 ad 00 00 c0 1c 9a 02 5b 89 02 2e 72 34 51 07 47 12 b8 82 77 f8 81 b0 32 39 39 39 b5 43 4e 59 52 55 42 5f 54 4f cd 06 c5 22 18 1c a1 3c 0f cf fd 3e c6 81 96 cf 43 45 54 d3 ce 33 d0 b1 32 39 39 39 b6 55 53 44 52 55 42 5f 30 36 31 b7 07 a4 3c 28 ca fe 2e 9a 81 82 46 55 54 d3",
            "8a ad 00 00 c0 1c 9a 02 5b 8a 02 2e 72 34 51 07 59 3e 86 81 77 98 83 b0 31 34 32 38 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 d1 22 18 24 89 12 39 d9 fe 2e a1 43 45 54 d3 ce",
            "8b ad 00 00 c0 1c 9a 02 5b 8b 02 2e 72 34 51 07 5d 12 c7 81 77 98 83 b0 31 34 32 39 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 d2 22 18 24 89 16 15 e3 fe 2e a1 43 45 54 d3 ce",
            "8c ad 00 00 c0 1c 9a 02 5b 8c 02 2e 72 34 51 07 5e 7c fc 81 77 98 83 b0 31 34 32 39 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e1 22 18 24 89 18 3c b8 fc 21 62 ed 43 45 54 d3 ce",
            "8d ad 00 00 c0 1c 9a 02 5b 8d 02 2e 72 34 51 07 60 67 ec 81 77 98 83 b0 31 34 32 36 b6 43 48 46 52 55 42 5f 54 4f c4 06 8b 22 18 24 89 18 7f c1 fd 03 2b 89 43 45 54 d3 ce",
            "8e ad 00 00 c0 1c 9a 02 5b 8e 02 2e 72 34 51 07 62 52 d3 81 77 98 83 b0 31 34 32 36 b7 53 4c 56 52 55 42 5f 54 4f cd 04 ef 22 18 24 89 1c 03 8f fe 19 86 43 45 54 d3 ce",
            "8f ad 00 00 c0 1c 9a 02 5b 8f 02 2e 72 34 51 07 68 13 91 81 77 f8 81 b1 32 39 39 39 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e2 22 18 24 89 20 5b c8 fe 2e 99 81 03 99 cf 43 45 54 d3 ce",
            "90 ad 00 00 c0 1c 9a 02 5b 90 02 2e 72 34 51 07 6b 68 ca 81 77 98 83 b0 31 34 32 39 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e3 22 18 24 89 24 1c 9e fc 21 62 ed 43 45 54 d3 ce",
            "91 ad 00 00 c0 1c 9a 02 5b 91 02 2e 72 34 51 07 6f 3d ea 81 77 f8 81 b1 32 39 39 39 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e4 22 18 24 89 28 6e 83 fe 2e 99 81 03 99 cf 43 45 54 d3 ce",
            "92 ad 00 00 c0 1c 9a 02 5b 92 02 2e 72 34 51 07 71 29 c6 82 77 98 83 b0 31 34 32 39 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e5 22 18 24 89 2a 1c 95 fc 21 62 ed 43 45 54 d3 ce 93 31 34 32 37 b0 55 53 44 30 30 30 30 30 30 54 4f c4 06 d5 2a 45 c9 fc 22 27 cd",
            "93 ad 00 00 c0 1c 9a 02 5b 93 02 2e 72 34 51 07 73 13 a7 81 77 98 83 b0 31 34 32 36 b8 43 48 46 52 55 42 5f 54 4f c4 06 8c 22 18 24 89 2b 6a b9 fd 03 2b 89 43 45 54 d3 ce",
            "94 ad 00 00 c0 1c 9a 02 5b 94 02 2e 72 34 51 07 74 7e 82 81 77 98 83 b0 31 34 32 36 b9 55 53 44 30 30 30 30 30 30 54 4f c4 06 d6 22 18 24 89 2d 15 de fc 22 27 cd 43 45 54 d3 ce",
            "95 ad 00 00 c0 1c 9a 02 5b 95 02 2e 72 34 51 07 7e 14 f5 81 77 f8 81 b1 32 39 39 39 b9 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e6 22 18 24 89 36 31 ea fe 2e 99 81 03 99 cf 43 45 54 d3 ce",
            "96 ad 00 00 c0 1c 9a 02 5b 96 02 2e 72 34 51 08 10 41 c1 82 77 f8 81 b0 33 30 30 30 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 d3 22 18 2b f1 0b 7d f7 fe 2d f7 81 01 ec cf 43 45 54 d3 ce 23 c0 b1 33 30 30 30 b1 00 57 d4 0c 1c 87 fe 31 8c 81 00 e5",
            "97 ad 00 00 c0 1c 9a 02 5b 97 02 2e 72 34 51 08 17 6b 98 81 77 98 83 b1 31 34 32 39 b6 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 d5 22 18 2b f1 12 4f a4 fe 30 fc 43 45 54 d3 ce",
            "98 ad 00 00 c0 1c 9a 02 5b 98 02 2e 72 34 51 08 19 55 ed 81 77 f8 81 b1 33 30 30 30 b2 47 42 50 52 55 42 5f 54 4f cd 06 af 22 18 2b f1 15 5b 88 fd 04 48 fb 81 02 e7 cf 43 45 54 d3 ce",
            "99 ad 00 00 c0 1c 9a 02 5b 99 02 2e 72 34 51 08 21 01 8a 81 77 f8 81 b1 33 30 30 30 b3 45 55 52 5f 52 55 42 5f 5f 54 4f c4 06 8b 22 18 2b f1 1c 74 d3 fc 26 22 9f 81 02 19 9f cf 43 45 54 d3 ce",
            "9a ad 00 00 c0 1c 9a 02 5b 9a 02 2e 72 34 51 08 22 6b e2 81 77 f8 81 b0 33 30 30 30 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 d6 22 18 2b f1 1f 0a eb fc 25 15 9d 81 03 bc cf 43 45 54 d3 ce",
            "9b ad 00 00 c0 1c 9a 02 5b 9b 02 2e 72 34 51 08 24 56 bf 81 77 f8 81 b1 33 30 30 30 b5 47 42 50 52 55 42 5f 54 4f cd 06 b0 22 18 2b f1 1f 6a a1 fd 04 48 fb 81 02 e7 cf 43 45 54 d3 ce",
            "9c ad 00 00 c0 1c 9a 02 5b 9c 02 2e 72 34 51 08 26 41 c7 81 77 98 83 b1 31 34 32 39 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e7 22 18 2b f1 22 3d ee fd 03 4c a3 43 45 54 d3 ce",
            "9d ad 00 00 c0 1c 9a 02 5b 9d 02 2e 72 34 51 08 28 2b dc 81 77 98 83 b1 31 34 32 39 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e8 22 18 2b f1 24 1b 85 fd 03 4c a3 43 45 54 d3 ce",
            "9e ad 00 00 c0 1c 9a 02 5b 9e 02 2e 72 34 51 08 2f 57 bf 81 77 98 83 b1 31 34 32 39 b9 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 e9 22 18 2b f1 2b 79 c2 fd 03 4c a3 43 45 54 d3 ce",
            "9f ad 00 00 c0 1c 9a 02 5b 9f 02 2e 72 34 51 08 35 17 d4 81 77 98 83 b1 31 34 33 30 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 ea 22 18 2b f1 31 5f ea fd 03 4c a3 43 45 54 d3 ce",
            "a0 ad 00 00 c0 1c 9a 02 5b a0 02 2e 72 34 51 08 37 02 c5 81 77 98 83 b1 31 34 33 30 b0 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 eb 22 18 2b f1 32 48 b5 fd 03 4c a3 43 45 54 d3 ce",
            "a1 ad 00 00 c0 1c 9a 02 5b a1 02 2e 72 34 51 08 38 6e c4 82 77 98 83 b1 31 34 33 30 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 ec 22 18 2b f1 34 74 e8 fd 03 4c a3 43 45 54 d3 ce 73 e0 81 b0 33 30 30 30 b6 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 d7 35 1f 90 fd 03 57 c3 81 00 ef cf",
            "a2 ad 00 00 c0 1c 9a 02 5b a2 02 2e 72 34 51 08 40 18 d3 81 77 98 83 b1 31 34 33 30 b6 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 d8 22 18 2b f1 3b 7b fb fe 30 fc 43 45 54 d3 ce",
            "a3 ad 00 00 c0 1c 9a 02 5b a3 02 2e 72 34 51 08 42 03 b9 81 77 f8 81 b0 33 30 30 30 b7 47 4c 44 52 55 42 5f 54 4f cd 06 91 22 18 33 d9 01 25 f9 fe 0d 65 d7 81 02 ed cf 43 45 54 d3 ce",
            "a4 ad 00 00 c0 1c 9a 02 5b a4 02 2e 72 34 51 08 4e 70 90 81 77 f8 81 b0 33 30 30 30 b8 45 55 52 52 55 42 5f 53 50 d4 06 a6 22 18 33 d9 0c 5f a8 fe 2e 85 81 00 fd cf 43 45 54 d3 ce",
            "a5 ad 00 00 c0 1c 9a 02 5b a5 02 2e 72 34 51 08 52 44 dd 81 77 f8 81 b1 33 30 30 30 b9 47 4c 44 52 55 42 5f 54 4f cd 06 92 22 18 33 d9 10 48 b2 fe 0e 47 ce 82 97 cf 43 45 54 d3 ce",
            "a6 ad 00 00 c0 1c 9a 02 5b a6 02 2e 72 34 51 08 54 2f 96 81 77 f8 81 b0 33 30 30 31 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 d9 22 18 33 d9 12 47 91 81 bd 82 97 cf 43 45 54 d3 ce",
            "a7 ad 00 00 c0 1c 9a 02 5b a7 02 2e 72 34 51 08 56 1a 80 81 77 98 83 b0 31 34 32 37 b5 43 4e 59 30 30 30 30 30 30 54 4f c4 06 8b 22 18 33 d9 15 46 ee fc 04 79 e8 43 45 54 d3 ce",
            "a8 ad 00 00 c0 1c 9a 02 5b a8 02 2e 72 34 51 08 58 04 c7 81 77 98 83 b0 31 34 32 37 b6 43 4e 59 30 30 30 30 30 30 54 4f c4 06 8c 22 18 33 d9 17 21 a8 fc 04 79 e8 43 45 54 d3 ce",
            "a9 ad 00 00 c0 1c 9a 02 5b a9 02 2e 72 34 51 08 59 70 80 81 77 98 83 b1 31 34 33 30 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 ed 22 18 33 d9 18 56 f7 fd 03 4c a3 43 45 54 d3 ce",
            "aa ad 00 00 c0 1c 9a 02 5b aa 02 2e 72 34 51 08 63 06 8a 81 77 98 83 b1 31 34 33 30 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 ee 22 18 33 d9 20 73 eb fd 03 4c a3 43 45 54 d3 ce",
            "ab ad 00 00 c0 1c 9a 02 5b ab 02 2e 72 34 51 08 64 70 a5 81 77 98 83 b1 31 34 33 30 b9 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 ef 22 18 33 d9 24 2c da fd 03 4c a3 43 45 54 d3 ce",
            "ac ad 00 00 c0 1c 9a 02 5b ac 02 2e 72 34 51 08 6a 30 b9 81 77 98 83 b1 31 34 33 31 b0 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 f0 22 18 33 d9 29 01 a0 fd 03 4c a3 43 45 54 d3 ce",
            "ad ad 00 00 c0 1c 9a 02 5b ad 02 2e 72 34 51 08 6c 1b df 81 77 98 83 b1 31 34 33 31 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 f1 22 18 33 d9 2a 31 a0 fd 03 4c a3 43 45 54 d3 ce",
            "ae ad 00 00 c0 1c 9a 02 5b ae 02 2e 72 34 51 08 77 1e dd 81 77 98 83 b1 31 34 33 31 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 f2 22 18 33 d9 36 49 e6 fd 03 4c a3 43 45 54 d3 ce",
            "af ad 00 00 c0 1c 9a 02 5b af 02 2e 72 34 51 08 79 07 82 81 77 f8 81 b1 33 30 30 31 b1 45 55 52 55 53 44 30 30 30 54 4f cd 06 f3 22 18 33 d9 38 39 fe fc 00 55 9c 81 02 e7 cf 43 45 54 d3 ce",
            "b0 ad 00 00 c0 1c 9a 02 5b b0 02 2e 72 34 51 09 04 07 ce 81 77 f8 81 b0 33 30 30 31 b2 45 55 52 55 53 44 30 30 30 54 4f cd 06 f4 22 18 3b c1 04 72 ac fb 06 37 f9 81 be cf 43 45 54 d3 ce",
            "b1 ad 00 00 c0 1c 9a 02 5b b1 02 2e 72 34 51 09 10 73 9c 81 77 f8 81 b0 33 30 30 31 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 da 22 18 3b c1 12 5f fb fc 24 7c 9d 81 02 a5 cf 43 45 54 d3 ce",
            "b2 ad 00 00 c0 1c 9a 02 5b b2 02 2e 72 34 51 09 1f 49 f5 81 77 98 83 b0 31 34 32 38 b7 43 48 46 52 55 42 5f 54 4f cd 03 8e 22 18 3b c1 21 2a e6 fc 21 33 cb 43 45 54 d3 ce",
            "b3 ad 00 00 c0 1c 9a 02 5b b3 02 2e 72 34 51 09 21 34 aa 81 77 f8 81 b0 33 30 30 31 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 f3 22 18 3b c1 22 49 eb fe 2c ee 81 02 a5 cf 43 45 54 d3 ce",
            "b4 ad 00 00 c0 1c 9a 02 5b b4 02 2e 72 34 51 09 23 1f 8b 81 77 f8 81 b0 33 30 30 31 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 f4 22 18 3b c1 24 2b e3 fe 2c ee 81 02 a5 cf 43 45 54 d3 ce",
            "b5 ad 00 00 c0 1c 9a 02 5b b5 02 2e 72 34 51 09 26 74 f6 81 77 98 83 b0 31 34 32 38 b8 47 42 50 52 55 42 5f 54 4f c4 06 bf 22 18 3b c1 28 60 9f fd 04 2e 95 43 45 54 d3 ce",
            "b6 ad 00 00 c0 1c 9a 02 5b b6 02 2e 72 34 51 09 2a 4a 8f 81 77 f8 81 b0 33 30 30 31 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 f5 22 18 3b c1 2c 04 e8 fe 2c ee 81 02 a5 cf 43 45 54 d3 ce",
            "b7 ad 00 00 c0 1c 9a 02 5b b7 02 2e 72 34 51 09 2c 34 d4 81 77 f8 81 b1 33 30 30 31 b7 43 4e 59 52 55 42 5f 54 4f 4d 31 c4 01 86 22 18 3b c1 2d 14 a6 fa 1c d9 81 01 af cf 43 45 54 d3 ce",
            "b8 ad 00 00 c0 1c 9a 02 5b b8 02 2e 72 34 51 09 30 0a ce 81 77 f8 81 b0 33 30 30 31 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 f6 22 18 3b c1 31 6f f2 fe 2c ee 81 02 a5 cf 43 45 54 d3 ce",
            "b9 ad 00 00 c0 1c 9a 02 5b b9 02 2e 72 34 51 09 33 5f d7 81 77 f8 81 b0 33 30 30 31 b9 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 f7 22 18 3b c1 35 0c 8a fe 2c ee 81 02 a5 cf 43 45 54 d3 ce",
            "ba ad 00 00 c0 1c 9a 02 5b ba 02 2e 72 34 51 09 35 55 d3 8d 77 98 83 b1 32 38 34 36 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 10 f8 22 18 3b c1 36 4e 99 fc 23 21 8b 43 45 54 d3 ce 81 32 38 39 37 b6 01 10 f9 fd 03 43 ff 80 32 38 39 37 b7 01 10 fa 80 32 38 39 37 b8 01 10 fb 80 32 38 39 37 b9 01 10 fc 80 32 38 39 38 b0 01 10 fd 80 32 38 39 38 b6 01 10 fe 80 32 38 39 38 b7 01 10 ff 80 32 38 39 38 b8 01 11 80 81 32 39 30 37 b0 01 11 81 fc 23 29 a5 80 32 39 32 31 b7 01 11 82 81 32 38 32 35 b8 01 11 83 fd 03 44 c5 41 e0 82 32 30 35 35 b4 01 11 84 fc 23 31 bf 81 01 66 a5 cf",
            "bb ad 00 00 c0 1c 9a 02 5b bb 02 2e 72 34 51 09 39 20 8e 81 77 98 83 b0 31 34 32 39 b1 47 42 50 52 55 42 5f 54 4f c4 06 c0 22 18 3b c1 3a 73 d6 fd 04 2e 95 43 45 54 d3 ce",
            "bc ad 00 00 c0 1c 9a 02 5b bc 02 2e 72 34 51 09 3b 0c 82 82 77 f8 81 b0 33 30 30 32 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 db 22 18 3b c1 3c 0b cf fc 24 7c 9d 81 02 a5 cf 43 45 54 d3 ce 37 c0 b1 33 30 30 32 b2 43 4e 59 52 55 42 5f 54 4f 4d 31 c4 01 87 22 18 43 a9 02 87 fa 1c d9 81 01 af",
            "bd ad 00 00 c0 1c 9a 02 5b bd 02 2e 72 34 51 09 4d 36 cc 81 77 f8 81 b0 33 30 30 32 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 dc 22 18 43 a9 12 62 ba fd 03 57 c3 81 00 ef cf 43 45 54 d3 ce",
            "be ad 00 00 c0 1c 9a 02 5b be 02 2e 72 34 51 09 51 0c ed 81 77 f8 81 b1 33 30 30 32 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 dd 22 18 43 a9 16 2d c8 fc 26 46 c9 81 01 ed cf 43 45 54 d3 ce",
            "bf ad 00 00 c0 1c 9a 02 5b bf 02 2e 72 34 51 09 54 62 b1 81 77 f8 81 b0 33 30 30 32 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 85 22 18 43 a9 18 69 d5 fe 2c ee 81 02 a5 cf 43 45 54 d3 ce",
            "c0 ad 00 00 c0 1c 9a 02 5b c0 02 2e 72 34 51 09 5f 63 f0 82 77 f8 81 b0 33 30 30 32 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 86 22 18 43 a9 24 41 de fe 2c ee 81 02 a5 cf 43 45 54 d3 ce 33 c0 b1 33 30 30 32 b7 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 de 24 4d b6 fd 03 67 93 81 09 4d cd",
            "c1 ad 00 00 c0 1c 9a 02 5b c1 02 2e 72 34 51 09 65 22 f7 81 77 f8 81 b0 33 30 30 32 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 87 22 18 43 a9 2a 3c b5 fe 2c ee 81 02 a5 cf 43 45 54 d3 ce",
            "c2 ad 00 00 c0 1c 9a 02 5b c2 02 2e 72 34 51 09 6a 62 f6 81 77 98 83 b0 31 34 32 39 b5 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 df 22 18 43 a9 2f 36 b0 fe 2d c8 43 45 54 d3 ce",
            "c3 ad 00 00 c0 1c 9a 02 5b c3 02 2e 72 34 51 09 73 7a 9d 81 77 f8 81 b1 33 30 30 32 b9 45 55 52 52 55 42 5f 30 36 31 b7 06 c1 22 18 43 a9 37 76 b7 fe 31 d7 81 86 cf 46 55 54 d3 ce",
            "c4 ad 00 00 c0 1c 9a 02 5b c4 02 2e 72 34 51 09 77 4f b7 81 77 f8 81 b1 33 30 30 33 b0 45 55 52 52 55 42 5f 30 36 31 b7 06 c2 22 18 43 a9 3c 54 f0 fe 31 cd 81 85 cf 46 55 54 d3 ce",
            "c5 ad 00 00 c0 1c 9a 02 5b c5 02 2e 72 34 51 0a 04 3b 98 82 77 f8 81 b1 33 30 30 33 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 e0 22 18 4b 91 0c 27 e4 fc 25 5f eb 81 01 d6 cf 43 45 54 d3 ce 03 c0 33 30 30 33 b2 00 57 e1 0c 52 bb fc 26 3c b5 81 01 ac",
            "c6 ad 00 00 c0 1c 9a 02 5b c6 02 2e 72 34 51 0a 0b 66 e4 81 77 98 83 b0 31 34 33 30 b2 55 53 44 52 55 42 5f 30 36 31 b7 07 a5 22 18 4b 91 13 6f dc fe 2c ac 46 55 54 d3 ce",
            "c7 ad 00 00 c0 1c 9a 02 5b c7 02 2e 72 34 51 0a 13 11 a9 81 77 98 83 b0 31 34 33 30 b5 43 4e 59 52 55 42 5f 54 4f cd 06 c6 22 18 4b 91 1b 38 8f fc 04 6f a3 43 45 54 d3 ce",
            "c8 ad 00 00 c0 1c 9a 02 5b c8 02 2e 72 34 51 0a 16 67 dd 82 77 98 83 b0 31 34 33 30 b4 43 4e 59 52 55 42 5f 54 4f cd 06 c7 22 18 4b 91 1e 04 d1 fc 04 6f a3 43 45 54 d3 ce 53 f0 81 33 30 30 33 b3 55 53 44 52 55 42 5f 30 36 31 b7 07 a6 1e 11 f8 fe 2c c7 81 83 cf 46 55 54 d3",
            "c9 ad 00 00 c0 1c 9a 02 5b c9 02 2e 72 34 51 0a 2a 7d fd 81 77 98 83 b1 31 34 33 32 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 88 22 18 4b 91 32 78 fb fc 24 07 85 43 45 54 d3 ce",
            "ca ad 00 00 c0 1c 9a 02 5b ca 02 2e 72 34 51 0a 2e 53 cf 81 77 f8 81 b1 33 30 30 33 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 e2 22 18 4b 91 35 4c f2 fc 26 46 c9 81 01 ed cf 43 45 54 d3 ce",
            "cb ad 00 00 c0 1c 9a 02 5b cb 02 2e 72 34 51 0a 42 69 9c 81 77 f8 81 b1 33 30 30 33 b5 55 53 44 30 30 30 30 30 30 54 4f c4 06 d7 22 18 52 f9 0c 30 f2 fc 24 13 f7 81 1a f1 cf 43 45 54 d3 ce",
            "cc ad 00 00 c0 1c 9a 02 5b cc 02 2e 72 34 51 0a 44 53 c0 81 77 f8 81 b1 33 30 30 33 b6 55 53 44 30 30 30 30 30 30 54 4f c4 06 d8 22 18 52 f9 0e 66 9d fc 24 13 f7 81 1a f1 cf 43 45 54 d3 ce",
            "cd ad 00 00 c0 1c 9a 02 5b cd 02 2e 72 34 51 0a 48 29 87 81 77 98 83 b1 31 34 33 32 b2 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 e3 22 18 52 f9 13 21 83 fe 31 e7 43 45 54 d3 ce",
            "ce ad 00 00 c0 1c 9a 02 5b ce 02 2e 72 34 51 0a 4b 7e e6 81 77 f8 81 b1 33 30 30 33 b7 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 e4 22 18 52 f9 16 4c cf fd 03 5d b1 81 01 97 cf 43 45 54 d3 ce",
            "cf ad 00 00 c0 1c 9a 02 5b cf 02 2e 72 34 51 0a 4d 6a c0 81 77 f8 81 b0 33 30 30 33 b8 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 e5 22 18 52 f9 17 2f 98 fe 2e ea 81 03 e5 cf 43 45 54 d3 ce",
            "d0 ad 00 00 c0 1c 9a 02 5b d0 02 2e 72 34 51 0a 56 7f bc 81 77 98 83 b1 31 34 33 32 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 89 22 18 52 f9 21 0f ba fc 24 07 85 43 45 54 d3 ce",
            "d1 ad 00 00 c0 1c 9a 02 5b d1 02 2e 72 34 51 0a 5e 2a cd 81 77 98 83 b1 31 34 33 32 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 8a 22 18 52 f9 29 25 8e fc 24 07 85 43 45 54 d3 ce",
            "d2 ad 00 00 c0 1c 9a 02 5b d2 02 2e 72 34 51 0a 69 2b 9c 81 77 98 83 b0 31 34 33 31 b3 47 42 50 52 55 42 5f 54 4f cd 06 b1 22 18 52 f9 34 30 a1 fd 04 17 b7 43 45 54 d3 ce",
            "d3 ad 00 00 c0 1c 9a 02 5b d3 02 2e 72 34 51 0a 6d 01 a3 81 77 98 83 b1 31 34 33 32 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 8b 22 18 52 f9 36 69 8e fc 24 07 85 43 45 54 d3 ce",
            "d4 ad 00 00 c0 1c 9a 02 5b d4 02 2e 72 34 51 0a 70 57 81 82 77 f8 81 b1 33 30 30 33 b9 45 55 52 5f 52 55 42 5f 5f 54 4f c4 06 8c 22 18 52 f9 3a 3e 96 fd 03 5f e7 81 0d f9 cf 43 45 54 d3 ce 03 c0 33 30 30 34 b0 06 8d 3b 46 f9 fc 26 08 89 81 00 7f c8",
            "d5 ad 00 00 c0 1c 9a 02 5b d5 02 2e 72 34 51 0a 72 42 a1 82 77 98 83 b0 31 34 33 31 b4 55 53 44 52 55 42 5f 53 50 d4 05 f7 22 18 52 f9 3c 28 81 fe 2c f3 43 45 54 d3 ce 82 31 34 33 31 b6 05 f8 3c 70 e6",
            "d6 ad 00 00 c0 1c 9a 02 5b d6 02 2e 72 34 51 0a 74 2c 95 81 77 98 83 b0 31 34 33 31 b5 47 42 50 52 55 42 5f 54 4f cd 06 b2 22 18 5a e1 01 60 dc fd 04 17 b7 43 45 54 d3 ce",
            "d7 ad 00 00 c0 1c 9a 02 5b d7 02 2e 72 34 51 0a 7f 2d b4 82 77 98 83 b1 31 34 33 32 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 e6 22 18 5a e1 0c 39 89 fc 26 51 c1 43 45 54 d3 ce 82 31 34 33 33 b0 00 57 e7 0c 62 ef",
            "d8 ad 00 00 c0 1c 9a 02 5b d8 02 2e 72 34 51 0b 04 6d 96 81 77 98 83 b1 31 34 33 33 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 e8 22 18 5a e1 13 06 c4 fc 26 51 c1 43 45 54 d3 ce",
            "d9 ad 00 00 c0 1c 9a 02 5b d9 02 2e 72 34 51 0b 13 43 d2 81 77 f8 81 b1 33 30 30 34 b1 47 4c 44 52 55 42 5f 54 4f cd 06 93 22 18 5a e1 20 1f 83 fe 0e 27 d4 81 02 9f cf 43 45 54 d3 ce",
            "da ad 00 00 c0 1c 9a 02 5b da 02 2e 72 34 51 0b 15 2e e4 81 77 98 83 b1 31 34 33 33 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 8c 22 18 5a e1 23 07 bd fe 2e c3 43 45 54 d3 ce",
            "db ad 00 00 c0 1c 9a 02 5b db 02 2e 72 34 51 0b 17 19 84 81 77 98 83 b1 31 34 33 33 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 8d 22 18 5a e1 24 5a d5 fe 2e c3 43 45 54 d3 ce",
            "dc ad 00 00 c0 1c 9a 02 5b dc 02 2e 72 34 51 0b 1e 45 ef 83 77 98 83 b0 31 34 33 31 b7 45 55 52 52 55 42 5f 53 50 d4 06 a7 22 18 5a e1 2b 37 9f fc 24 7e c9 43 45 54 d3 ce b3 b1 31 34 33 33 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 8e 2c 3d d3 fe 2e c3 b3 b0 31 34 33 31 b8 48 4b 44 52 55 42 5f 54 4f c4 08 ca 2c 48 89 fc 04 21 bf",
            "dd ad 00 00 c0 1c 9a 02 5b dd 02 2e 72 34 51 0b 22 19 e3 81 77 98 83 b0 31 34 33 31 b9 45 55 52 52 55 42 5f 53 50 d4 06 a8 22 18 5a e1 2e 7d 84 fc 24 7e c9 43 45 54 d3 ce",
            "de ad 00 00 c0 1c 9a 02 5b de 02 2e 72 34 51 0b 24 04 c1 81 77 98 83 b1 31 34 33 33 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 8f 22 18 5a e1 32 2f ae fe 2e c3 43 45 54 d3 ce",
            "df ad 00 00 c0 1c 9a 02 5b df 02 2e 72 34 51 0b 27 5b a1 82 77 98 83 b1 31 34 33 33 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 90 22 18 5a e1 35 3b 98 fe 2e c3 43 45 54 d3 ce 93 31 34 33 33 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 e9 35 64 96 fc 26 51 c1",
            "e0 ad 00 00 c0 1c 9a 02 5b e0 02 2e 72 34 51 0b 29 44 f4 81 77 f8 81 b1 33 30 30 34 b2 43 4e 59 30 30 30 30 30 30 54 4f c4 06 8d 22 18 5a e1 36 13 cf fd 00 40 c2 81 02 a4 cf 43 45 54 d3 ce",
            "e1 ad 00 00 c0 1c 9a 02 5b e1 02 2e 72 34 51 0b 2f 05 99 81 77 98 83 b1 31 34 33 34 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 ea 22 18 5a e1 3c 3d a1 fc 26 51 c1 43 45 54 d3 ce",
            "e2 ad 00 00 c0 1c 9a 02 5b e2 02 2e 72 34 51 0b 43 1c b6 81 77 98 83 b1 31 34 33 34 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 eb 22 18 62 c9 13 1a fd fc 26 51 c1 43 45 54 d3 ce",
            "e3 ad 00 00 c0 1c 9a 02 5b e3 02 2e 72 34 51 0b 46 72 87 82 77 98 83 b1 31 34 33 34 b5 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 ec 22 18 62 c9 16 5f b6 fc 26 51 c1 43 45 54 d3 ce 63 e0 81 b0 33 30 30 34 b3 00 57 ed 17 49 af fe 2e cc 81 92 cf",
            "e4 ad 00 00 c0 1c 9a 02 5b e4 02 2e 72 34 51 0b 48 5c 82 81 77 98 83 b1 31 34 33 34 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 91 22 18 62 c9 19 19 83 fe 2e c3 43 45 54 d3 ce",
            "e5 ad 00 00 c0 1c 9a 02 5b e5 02 2e 72 34 51 0b 53 5c c3 81 77 98 83 b1 31 34 33 34 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 92 22 18 62 c9 24 7d 87 fe 2e c3 43 45 54 d3 ce",
            "e6 ad 00 00 c0 1c 9a 02 5b e6 02 2e 72 34 51 0b 5b 07 d4 81 77 98 83 b1 31 34 33 34 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 93 22 18 62 c9 2a 72 a1 fe 2e c3 43 45 54 d3 ce",
            "e7 ad 00 00 c0 1c 9a 02 5b e7 02 2e 72 34 51 0b 76 49 f7 81 77 f8 81 b1 33 30 30 34 b4 47 42 50 52 55 42 5f 54 4f c4 06 c1 22 18 6a b1 0a 2d ae fd 04 40 eb 81 02 d5 cf 43 45 54 d3 ce",
            "e8 ad 00 00 c0 1c 9a 02 5b e8 02 2e 72 34 51 0b 7a 1f ab 81 77 f8 81 b0 33 30 30 34 b5 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 ee 22 18 6a b1 0c 73 ad fe 2e c5 82 a1 cf 43 45 54 d3 ce",
            "e9 ad 00 00 c0 1c 9a 02 5b e9 02 2e 72 34 51 0b 7f 5f d6 81 77 98 83 b1 31 34 33 34 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 ef 22 18 6a b1 13 1d f0 fc 26 35 b1 43 45 54 d3 ce",
            "ea ad 00 00 c0 1c 9a 02 5b ea 02 2e 72 34 51 0c 05 22 d9 81 77 f8 82 b0 32 38 38 31 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 94 22 18 6a b1 18 56 a1 fc 23 14 cb 81 01 65 90 cf 43 45 54 d3 ce",
            "eb ad 00 00 c0 1c 9a 02 5b eb 02 2e 72 34 51 0c 08 75 ed 81 77 f8 81 b1 33 30 30 34 b7 47 42 50 52 55 42 5f 54 4f c4 06 c2 22 18 6a b1 1c 5d df fc 2c 51 8b 81 02 e7 cf 43 45 54 d3 ce",
            "ec ad 00 00 c0 1c 9a 02 5b ec 02 2e 72 34 51 0c 10 21 a8 81 77 98 83 b1 31 34 33 35 b0 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 95 22 18 6a b1 23 17 f0 fc 24 4b e5 43 45 54 d3 ce",
            "ed ad 00 00 c0 1c 9a 02 5b ed 02 2e 72 34 51 0c 12 0b ac 81 77 98 83 b1 31 34 33 35 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 96 22 18 6a b1 24 69 f1 fc 24 4b e5 43 45 54 d3 ce",
            "ee ad 00 00 c0 1c 9a 02 5b ee 02 2e 72 34 51 0c 19 36 bc 81 77 98 83 b1 31 34 33 35 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 97 22 18 6a b1 2c 48 da fc 24 4b e5 43 45 54 d3 ce",
            "ef ad 00 00 c0 1c 9a 02 5b ef 02 2e 72 34 51 0c 1e 77 9d 82 77 98 83 b1 31 34 33 35 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 98 22 18 6a b1 32 3f ec fc 24 4b e5 43 45 54 d3 ce 82 31 34 33 35 b5 01 11 99 33 0c dd",
            "f0 ad 00 00 c0 1c 9a 02 5b f0 02 2e 72 34 51 0c 22 4d 8b 82 77 98 83 b1 31 34 33 35 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 9a 22 18 6a b1 35 47 a0 fc 24 4b e5 43 45 54 d3 ce 53 e0 81 33 30 30 34 b8 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 f0 35 76 c6 fd 03 5d b1 81 01 97 cf",
            "f1 ad 00 00 c0 1c 9a 02 5b f1 02 2e 72 34 51 0c 29 77 b7 81 77 98 83 b1 31 34 33 35 b8 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 f1 22 18 6a b1 3c 51 96 fc 26 35 b1 43 45 54 d3 ce",
            "f2 ad 00 00 c0 1c 9a 02 5b f2 02 2e 72 34 51 0c 2b 62 9e 81 77 98 83 b0 31 34 33 32 b4 55 41 48 30 30 30 30 30 30 54 4f cd 02 93 22 18 72 99 02 2a 88 fc 0b 18 cf 43 45 54 d3 ce",
            "f3 ad 00 00 c0 1c 9a 02 5b f3 02 2e 72 34 51 0c 3c 23 b7 81 77 f8 81 b1 33 30 30 34 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 f2 22 18 72 99 13 34 8d fc 26 46 c9 81 01 ed cf 43 45 54 d3 ce",
            "f4 ad 00 00 c0 1c 9a 02 5b f4 02 2e 72 34 51 0c 3e 0d ee 81 77 f8 81 b0 33 30 30 35 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 f3 22 18 72 99 13 55 8d fd 03 56 85 81 01 87 cf 43 45 54 d3 ce",
            "f5 ad 00 00 c0 1c 9a 02 5b f5 02 2e 72 34 51 0c 43 4f c0 82 77 98 83 b1 31 34 33 35 b9 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 9b 22 18 72 99 19 25 cc fc 24 4b e5 43 45 54 d3 ce 33 90 b0 31 34 33 32 b7 45 55 52 52 55 42 5f 30 36 31 b7 06 c3 19 46 ba fe 2f f9 46 55 54 d3",
            "f6 ad 00 00 c0 1c 9a 02 5b f6 02 2e 72 34 51 0c 49 0e ae 81 77 98 83 b0 31 34 33 32 b8 45 55 52 52 55 42 5f 30 36 31 b7 06 c4 22 18 72 99 1e 4b db fe 2f f9 46 55 54 d3 ce",
            "f7 ad 00 00 c0 1c 9a 02 5b f7 02 2e 72 34 51 0c 4a 78 fb 81 77 98 83 b1 31 34 33 36 b0 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 9c 22 18 72 99 21 32 d4 fc 24 4b e5 43 45 54 d3 ce",
            "f8 ad 00 00 c0 1c 9a 02 5b f8 02 2e 72 34 51 0c 4e 4f 8f 81 77 98 83 b1 31 34 33 36 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 9d 22 18 72 99 25 09 c6 fc 24 4b e5 43 45 54 d3 ce",
            "f9 ad 00 00 c0 1c 9a 02 5b f9 02 2e 72 34 51 0c 54 0f c6 82 77 98 83 b1 31 34 33 36 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 9e 22 18 72 99 29 51 ca fc 24 4b e5 43 45 54 d3 ce 82 31 34 33 36 b3 01 11 9f 2b 05 de",
            "fa ad 00 00 c0 1c 9a 02 5b fa 02 2e 72 34 51 0c 5b 3a bc 81 77 98 83 b0 31 34 33 33 b2 55 53 44 52 55 42 5f 30 36 31 b7 07 a7 22 18 72 99 32 3b 8c fe 2c a8 46 55 54 d3 ce",
            "fb ad 00 00 c0 1c 9a 02 5b fb 02 2e 72 34 51 0c 60 7b be 82 77 98 83 b1 31 34 33 36 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 a0 22 18 72 99 36 7d a0 fc 24 4b e5 43 45 54 d3 ce b3 b0 31 34 33 33 b3 48 4b 44 52 55 42 5f 54 4f cd 05 a1 38 15 c4 fc 04 32 c2",
            "fc ad 00 00 c0 1c 9a 02 5b fc 02 2e 72 34 51 0c 62 65 ab 81 77 f8 81 b1 33 30 30 35 b1 45 55 52 55 53 44 30 30 30 54 4f c4 03 fa 22 18 72 99 39 3c e6 fb 06 41 8b 81 01 e2 cf 43 45 54 d3 ce",
            "fd ad 00 00 c0 1c 9a 02 5b fd 02 2e 72 34 51 0c 64 50 c2 81 77 f8 81 b1 33 30 30 35 b2 43 4e 59 52 55 42 5f 54 4f cd 06 c8 22 18 72 99 3a 09 8d fd 00 41 d4 82 97 cf 43 45 54 d3 ce",
            "fe ad 00 00 c0 1c 9a 02 5b fe 02 2e 72 34 51 0c 66 3b f5 81 77 f8 81 b0 33 30 30 35 b3 55 53 44 52 55 42 5f 30 36 31 b7 07 a8 22 18 72 99 3c 64 db fe 2b bb 81 90 cf 46 55 54 d3 ce",
            "ff ad 00 00 c0 1c 9a 02 5b ff 02 2e 72 34 51 0c 73 27 9a 81 77 f8 81 b0 33 30 30 35 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 f4 22 18 7a 81 0d 11 d4 fd 03 4e a7 81 03 d5 cf 43 45 54 d3 ce",
            "00 ae 00 00 c0 1c 9a 02 5c 80 02 2e 72 34 51 0c 7a 51 b5 81 77 98 83 b1 31 34 33 36 b5 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 f5 22 18 7a 81 13 2b b3 fc 26 4e b1 43 45 54 d3 ce",
            "01 ae 00 00 c0 1c 9a 02 5c 81 02 2e 72 34 51 0d 00 12 ab 81 77 f8 81 b1 33 30 30 35 b5 43 48 46 52 55 42 5f 54 4f c4 06 8d 22 18 7a 81 19 3c b8 fc 22 5c dd 81 02 e7 cf 43 45 54 d3 ce",
            "02 ae 00 00 c0 1c 9a 02 5c 82 02 2e 72 34 51 0d 12 3f 97 82 77 98 83 b1 31 34 33 34 b3 55 53 44 30 30 30 30 30 30 54 4f c4 06 d9 22 18 7a 81 2b 17 d0 fc 23 26 95 43 45 54 d3 ce 73 e0 81 b0 33 30 30 35 b6 43 48 46 52 55 42 5f 54 4f c4 06 8e 2c 12 c1 fe 2a f5 81 be cf",
            "03 ae 00 00 c0 1c 9a 02 5c 83 02 2e 72 34 51 0d 14 28 f5 81 77 98 83 b1 31 34 33 34 b2 55 53 44 30 30 30 30 30 30 54 4f c4 06 da 22 18 7a 81 2d 52 ef fc 23 26 95 43 45 54 d3 ce",
            "04 ae 00 00 c0 1c 9a 02 5c 84 02 2e 72 34 51 0d 22 7e f7 81 77 98 83 b1 31 34 33 37 b2 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 f6 22 18 7a 81 3c 69 d5 fc 26 4e b1 43 45 54 d3 ce",
            "05 ae 00 00 c0 1c 9a 02 5c 85 02 2e 72 34 51 0d 37 16 b3 82 77 f8 81 b1 33 30 30 35 b7 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 f7 22 19 01 e9 13 47 e7 fd 03 5d b1 81 01 97 cf 43 45 54 d3 ce 03 c0 33 30 30 35 b8 00 57 f8 13 68 ea fd 03 5f d3 81 03 b7",
            "06 ae 00 00 c0 1c 9a 02 5c 86 02 2e 72 34 51 0d 39 00 bf 81 77 f8 81 b0 33 30 30 35 b9 47 42 50 52 55 42 5f 54 4f cd 06 b3 22 19 01 e9 15 7e bf fc 2a 1a 93 81 00 c4 cf 43 45 54 d3 ce",
            "07 ae 00 00 c0 1c 9a 02 5c 87 02 2e 72 34 51 0d 40 2b cd 81 77 f8 81 b1 33 30 30 36 b0 45 55 52 5f 52 55 42 5f 5f 54 4f c4 06 8e 22 19 01 e9 1d 1c 8e fe 30 d9 82 03 d1 cf 43 45 54 d3 ce",
            "08 ae 00 00 c0 1c 9a 02 5c 88 02 2e 72 34 51 0d 42 16 cd 81 77 f8 81 b0 33 30 30 36 b1 55 53 44 52 55 42 5f 53 50 d4 05 f9 22 19 01 e9 1e 5e b6 fd 03 40 9f 81 00 eb cf 43 45 54 d3 ce",
            "09 ae 00 00 c0 1c 9a 02 5c 89 02 2e 72 34 51 0d 44 00 dc 81 77 f8 81 b0 33 30 30 36 b2 47 42 50 52 55 42 5f 54 4f cd 06 b4 22 19 01 e9 20 54 bb fc 2a 1a 93 81 00 c4 cf 43 45 54 d3 ce",
            "0a ae 00 00 c0 1c 9a 02 5c 8a 02 2e 72 34 51 0d 63 18 e1 81 77 98 83 b0 31 34 33 35 b2 47 4c 44 52 55 42 5f 54 4f cd 06 94 22 19 09 d1 02 11 ec fe 0d 79 d9 43 45 54 d3 ce",
            "0b ae 00 00 c0 1c 9a 02 5c 8b 02 2e 72 34 51 0d 6e 19 fb 81 77 f8 81 b0 33 30 30 36 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 f9 22 19 09 d1 0d 28 c8 81 bd 82 97 cf 43 45 54 d3 ce",
            "0c ae 00 00 c0 1c 9a 02 5c 8c 02 2e 72 34 51 0d 71 70 9f 82 77 98 83 b0 31 34 33 35 b4 47 4c 44 52 55 42 5f 54 4f cd 06 95 22 19 09 d1 10 67 c6 fe 0d 79 d9 43 45 54 d3 ce 53 e0 81 33 30 30 36 b4 45 55 52 52 55 42 5f 53 50 d4 06 a9 10 47 da fd 03 51 8f 81 03 ca cf",
            "0d ae 00 00 c0 1c 9a 02 5c 8d 02 2e 72 34 51 0d 77 2e f1 81 77 f8 81 b0 33 30 30 36 b5 43 4e 59 30 30 30 30 30 30 54 4f c4 06 8e 22 19 09 d1 16 05 c9 fc 04 79 c6 81 00 c3 cf 43 45 54 d3 ce",
            "0e ae 00 00 c0 1c 9a 02 5c 8e 02 2e 72 34 51 0e 14 5b e6 81 77 98 83 b1 31 34 33 38 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 a1 22 19 09 d1 33 29 ba fc 24 32 b3 43 45 54 d3 ce",
            "0f ae 00 00 c0 1c 9a 02 5c 8f 02 2e 72 34 51 0e 1a 1b ff 81 77 f8 81 b0 33 30 30 36 b6 45 55 52 55 53 44 30 30 30 54 4f cd 06 f5 22 19 09 d1 38 7f c2 fb 06 1d a7 81 00 c4 cf 43 45 54 d3 ce",
            "10 ae 00 00 c0 1c 9a 02 5c 90 02 2e 72 34 51 0e 23 31 cd 81 77 f8 81 b1 33 30 30 36 b7 45 55 52 55 53 44 30 30 30 54 4f cd 06 f6 22 19 11 b9 05 3b 95 fc 00 56 c6 81 01 a1 cf 43 45 54 d3 ce",
            "11 ae 00 00 c0 1c 9a 02 5c 91 02 2e 72 34 51 0e 2c 48 f7 81 77 f8 82 b1 32 39 31 38 b8 48 4b 44 52 55 42 5f 54 4f c4 08 cb 22 19 11 b9 0e 5e a8 fc 04 37 ad 81 00 fd cf 43 45 54 d3 ce",
            "12 ae 00 00 c0 1c 9a 02 5c 92 02 2e 72 34 51 0e 32 08 e0 81 77 98 83 b1 31 34 33 38 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 fa 22 19 11 b9 13 78 c4 fe 30 d4 43 45 54 d3 ce",
            "13 ae 00 00 c0 1c 9a 02 5c 93 02 2e 72 34 51 0e 35 5e 98 82 77 98 83 b1 31 34 34 30 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 fb 22 19 11 b9 18 13 cb fc 26 39 a5 43 45 54 d3 ce 63 e0 81 b0 33 30 30 36 b9 00 57 fc 17 09 e3 fe 2d f7 81 01 ec cf",
            "14 ae 00 00 c0 1c 9a 02 5c 94 02 2e 72 34 51 0e 3e 74 cb 81 77 98 83 b1 31 34 33 38 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 a2 22 19 11 b9 21 5c ae fc 24 32 b3 43 45 54 d3 ce",
            "15 ae 00 00 c0 1c 9a 02 5c 95 02 2e 72 34 51 0e 48 09 a5 81 77 98 83 b1 31 34 33 38 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 a3 22 19 11 b9 29 73 9c fc 24 32 b3 43 45 54 d3 ce",
            "16 ae 00 00 c0 1c 9a 02 5c 96 02 2e 72 34 51 0e 54 75 8d 81 77 98 83 b1 31 34 33 38 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 a4 22 19 11 b9 37 20 ce fc 24 32 b3 43 45 54 d3 ce",
            "17 ae 00 00 c0 1c 9a 02 5c 97 02 2e 72 34 51 0e 5a 67 82 c0 77 98 83 b1 32 30 35 35 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 a5 22 19 11 b9 3b 58 e9 fc 23 31 bf 43 45 54 d3 ce 81 31 39 30 30 b6 01 11 a6 fd 03 45 8b 80 31 39 30 30 b9 01 11 a7 80 31 39 30 31 b2 01 11 a8 80 31 39 30 31 b3 01 11 a9 81 32 35 30 36 b3 01 11 aa fe 2d a9 80 32 35 30 37 b4 01 11 ab 80 32 35 30 37 b7 01 11 ac 80 32 35 30 38 b1 01 11 ad 81 31 38 36 37 b0 01 11 ae fc 23 34 9d 80 31 38 36 37 b1 01 11 af 80 31 38 36 37 b4 01 11 b0 80 31 38 36 37 b5 01 11 b1 80 31 38 36 37 b6 01 11 b2 80 31 38 36 37 b9 01 11 b3 80 31 38 36 38 b0 01 11 b4 80 31 38 36 38 b1 01 11 b5 80 32 30 35 39 b3 01 11 b6 80 32 30 35 39 b4 01 11 b7 80 32 30 35 39 b5 01 11 b8 80 32 30 35 39 b6 01 11 b9 80 32 30 35 39 b7 01 11 ba 80 32 30 35 39 b8 01 11 bb 80 32 30 36 30 b0 01 11 bc 80 32 30 36 30 b1 01 11 bd 80 32 30 36 30 b2 01 11 be 80 32 30 36 30 b3 01 11 bf 80 32 30 36 30 b4 01 11 c0 80 32 30 36 30 b5 01 11 c1 81 32 34 37 33 b8 01 11 c2 fc 23 35 e5 81 31 34 39 30 b1 01 11 c3 fc 23 37 df 80 31 34 39 30 b3 01 11 c4 80 31 34 39 30 b4 01 11 c5 80 31 34 39 30 b5 01 11 c6 81 31 35 31 34 b8 01 11 c7 fe 2d ae 80 31 35 31 35 b6 01 11 c8 80 31 35 31 35 b7 01 11 c9 80 31 35 31 35 b8 01 11 ca 81 32 30 37 33 b8 01 11 cb fc 23 38 f5 80 32 30 37 33 b9 01 11 cc 80 32 30 37 34 b0 01 11 cd 80 32 30 37 34 b1 01 11 ce 80 32 30 37 34 b2 01 11 cf 80 32 30 37 34 b3 01 11 d0 80 32 30 37 34 b4 01 11 d1 80 32 30 37 34 b5 01 11 d2 80 32 30 37 34 b6 01 11 d3 80 32 30 37 34 b7 01 11 d4 80 32 30 37 34 b8 01 11 d5 80 32 30 37 34 b9 01 11 d6 81 32 36 37 32 b8 01 11 d7 fe 2d b0 80 32 36 37 33 b0 01 11 d8 80 32 36 37 33 b1 01 11 d9 80 32 36 37 33 b2 01 11 da 80 32 36 37 33 b4 01 11 db 80 32 36 37 33 b8 01 11 dc 80 32 36 37 33 b9 01 11 dd 80 32 36 37 34 b0 01 11 de 80 32 36 39 30 b8 01 11 df 80 32 36 39 31 b2 01 11 e0 80 32 36 39 31 b3 01 11 e1 80 32 36 39 31 b4 01 11 e2 81 31 37 32 30 b1 01 11 e3 fd 03 45 e5 40 e0 82 32 32 36 31 b7 01 11 e4 81 0f 4b dd cf",
            "18 ae 00 00 c0 1c 9a 02 5c 98 02 2e 72 34 51 0e 5c 20 a4 81 77 f8 81 b0 33 30 30 37 b1 42 59 4e 52 55 42 5f 54 4f c4 02 c3 22 19 19 a1 01 76 fb fd 01 60 d3 81 03 d9 cf 43 45 54 d3 ce",
            "19 ae 00 00 c0 1c 9a 02 5c 99 02 2e 72 34 51 0e 67 20 b8 81 77 98 83 b1 31 34 33 38 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 fd 22 19 19 a1 0d 14 b5 fc 26 39 a5 43 45 54 d3 ce",
            "1a ae 00 00 c0 1c 9a 02 5c 9a 02 2e 72 34 51 0e 69 0b e1 81 77 98 83 b1 31 34 33 39 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 fe 22 19 19 a1 0d 3e a6 fc 26 39 a5 43 45 54 d3 ce",
            "1b ae 00 00 c0 1c 9a 02 5c 9b 02 2e 72 34 51 0e 6e 4b a4 81 77 98 83 b1 31 34 33 39 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 57 ff 22 19 19 a1 13 4e ed fc 26 39 a5 43 45 54 d3 ce",
            "1c ae 00 00 c0 1c 9a 02 5c 9c 02 2e 72 34 51 0e 7b 37 90 81 77 f8 81 b0 33 30 30 37 b2 55 41 48 30 30 30 30 30 30 54 4f cd 02 94 22 19 19 a1 21 20 f3 fc 0a 68 97 81 03 8e cf 43 45 54 d3 ce",
            "1d ae 00 00 c0 1c 9a 02 5c 9d 02 2e 72 34 51 0e 7f 0e 90 82 77 98 83 b1 31 34 33 39 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 e5 22 19 19 a1 23 44 c8 fc 23 3d 9b 43 45 54 d3 ce 82 31 34 33 39 b5 01 11 e6 25 0c e3",
            "1e ae 00 00 c0 1c 9a 02 5c 9e 02 2e 72 34 51 0f 08 22 97 81 77 98 83 b1 31 34 33 39 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 e7 22 19 19 a1 2d 03 c2 fc 23 3d 9b 43 45 54 d3 ce",
            "1f ae 00 00 c0 1c 9a 02 5c 9f 02 2e 72 34 51 0f 0a 0d ad 81 77 f8 81 b1 33 30 30 37 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 80 22 19 19 a1 2f 7a c7 fc 26 14 fb 81 16 5f af cf 43 45 54 d3 ce",
            "20 ae 00 00 c0 1c 9a 02 5c a0 02 2e 72 34 51 0f 0d 63 bb 82 77 98 83 b1 31 34 33 39 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 e8 22 19 19 a1 32 74 98 fc 23 3d 9b 43 45 54 d3 ce 63 e0 81 b0 33 30 30 37 b4 01 11 e9 33 3c a0 fc 22 0d 85 82 a6 cf",
            "21 ae 00 00 c0 1c 9a 02 5c a1 02 2e 72 34 51 0f 11 39 ae 82 77 98 83 b1 31 34 33 39 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 ea 22 19 19 a1 35 7e a1 fc 23 3d 9b 43 45 54 d3 ce 93 31 34 33 39 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 81 36 40 df fc 26 39 a5",
            "22 ae 00 00 c0 1c 9a 02 5c a2 02 2e 72 34 51 0f 18 62 f0 81 77 98 83 b1 31 34 34 30 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 82 22 19 21 89 0e 88 fc 26 39 a5 43 45 54 d3 ce",
            "23 ae 00 00 c0 1c 9a 02 5c a3 02 2e 72 34 51 0f 2b 0f c8 81 77 98 83 b1 31 34 34 30 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 83 22 19 21 89 13 79 a4 fc 26 39 a5 43 45 54 d3 ce",
            "24 ae 00 00 c0 1c 9a 02 5c a4 02 2e 72 34 51 0f 2e 64 cf 81 77 98 83 b1 31 34 34 30 b6 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 84 22 19 21 89 17 27 97 fc 26 39 a5 43 45 54 d3 ce",
            "25 ae 00 00 c0 1c 9a 02 5c a5 02 2e 72 34 51 0f 30 50 c1 82 77 98 83 b1 31 34 34 30 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 eb 22 19 21 89 19 56 f1 fc 23 3d 9b 43 45 54 d3 ce 73 e0 81 b0 33 30 30 37 b5 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 85 18 20 a9 fd 03 4a e5 81 90 cf",
            "26 ae 00 00 c0 1c 9a 02 5c a6 02 2e 72 34 51 0f 32 3a 9a 81 77 98 83 b0 31 34 33 38 b0 45 55 52 55 53 44 30 30 30 54 4f c4 03 fb 22 19 21 89 1b 30 8b fb 06 37 8b 43 45 54 d3 ce",
            "27 ae 00 00 c0 1c 9a 02 5c a7 02 2e 72 34 51 0f 36 0f f6 81 77 98 83 b1 31 34 33 37 b9 43 4e 59 52 55 42 5f 54 4f cd 06 c9 22 19 21 89 1e 1c 9e fc 05 06 bd 43 45 54 d3 ce",
            "28 ae 00 00 c0 1c 9a 02 5c a8 02 2e 72 34 51 0f 39 65 b4 81 77 f8 81 b0 33 30 30 37 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 ec 22 19 21 89 21 70 f1 fc 22 0d 85 82 a6 cf 43 45 54 d3 ce",
            "29 ae 00 00 c0 1c 9a 02 5c a9 02 2e 72 34 51 0f 3d 3a dc 81 77 98 83 b1 31 34 34 30 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 ed 22 19 21 89 25 42 bd fc 23 3d 9b 43 45 54 d3 ce",
            "2a ae 00 00 c0 1c 9a 02 5c aa 02 2e 72 34 51 0f 41 11 d1 81 77 f8 81 b0 33 30 30 37 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 ee 22 19 21 89 2a 0c bf fc 22 0d 85 82 a6 cf 43 45 54 d3 ce",
            "2b ae 00 00 c0 1c 9a 02 5c ab 02 2e 72 34 51 0f 42 7c d2 81 77 98 83 b1 31 34 34 30 b9 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 ef 22 19 21 89 2b 3b fd fc 23 3d 9b 43 45 54 d3 ce",
            "2c ae 00 00 c0 1c 9a 02 5c ac 02 2e 72 34 51 0f 4f 69 fd 82 77 f8 81 b0 33 30 30 37 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 f0 22 19 21 89 37 2b fd fc 22 0d 85 82 a6 cf 43 45 54 d3 ce 13 c0 33 30 30 37 b9 43 48 46 52 55 42 5f 54 4f c4 06 8f 38 15 9c fc 20 6c 8d 81 00 c4",
            "2d ae 00 00 c0 1c 9a 02 5c ad 02 2e 72 34 51 0f 62 15 ba 84 77 98 83 b0 31 34 33 38 b2 55 53 44 30 30 30 30 30 30 54 4f c4 06 db 22 19 28 f1 0c 68 b4 fc 22 4b f7 43 45 54 d3 ce 53 e0 81 33 30 30 38 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 86 0d 2b f4 fe 2e 9b 81 02 be cf 03 c0 33 30 30 38 b1 00 58 87 0d 52 88 fd 03 57 c3 81 00 ef 33 c0 b1 33 30 30 38 b2 43 48 46 52 55 42 5f 54 4f c4 06 90 0e 06 ec fc 23 4b a3 81 01 a1",
            "2e ae 00 00 c0 1c 9a 02 5c ae 02 2e 72 34 51 0f 63 7e c5 81 77 98 83 b0 31 34 33 38 b1 55 53 44 30 30 30 30 30 30 54 4f c4 06 dc 22 19 28 f1 0f 43 d4 fc 22 4b f7 43 45 54 d3 ce",
            "2f ae 00 00 c0 1c 9a 02 5c af 02 2e 72 34 51 0f 69 3f 91 81 77 98 83 b1 31 34 34 31 b0 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 88 22 19 28 f1 13 64 b7 fd 03 72 95 43 45 54 d3 ce",
            "30 ae 00 00 c0 1c 9a 02 5c b0 02 2e 72 34 51 0f 74 3f e1 81 77 f8 81 b0 33 30 30 38 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 89 22 19 28 f1 20 20 92 fd 03 52 b9 81 03 bf cf 43 45 54 d3 ce",
            "31 ae 00 00 c0 1c 9a 02 5c b1 02 2e 72 34 51 0f 78 15 c5 81 77 98 83 b1 31 34 34 31 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 f1 22 19 28 f1 23 51 b9 fc 23 47 e1 43 45 54 d3 ce",
            "32 ae 00 00 c0 1c 9a 02 5c b2 02 2e 72 34 51 0f 7a 00 fd 81 77 98 83 b1 31 34 34 31 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 f2 22 19 28 f1 25 24 f7 fc 23 47 e1 43 45 54 d3 ce",
            "33 ae 00 00 c0 1c 9a 02 5c b3 02 2e 72 34 51 10 01 2b 81 81 77 98 83 b1 31 34 34 31 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 f3 22 19 28 f1 2d 1b dd fc 23 47 e1 43 45 54 d3 ce",
            "34 ae 00 00 c0 1c 9a 02 5c b4 02 2e 72 34 51 10 08 56 c6 82 77 98 83 b1 31 34 34 31 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 f4 22 19 28 f1 32 7f e0 fc 23 47 e1 43 45 54 d3 ce 82 31 34 34 31 b4 01 11 f5 33 52 ac",
            "35 ae 00 00 c0 1c 9a 02 5c b5 02 2e 72 34 51 10 0a 40 a8 81 77 98 83 b1 31 34 34 31 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 f6 22 19 28 f1 36 0c b5 fc 23 47 e1 43 45 54 d3 ce",
            "36 ae 00 00 c0 1c 9a 02 5c b6 02 2e 72 34 51 10 0c 2b cf 81 77 f8 81 b0 33 30 30 38 b4 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 8a 22 19 28 f1 36 59 84 fe 2d f7 81 01 ec cf 43 45 54 d3 ce",
            "37 ae 00 00 c0 1c 9a 02 5c b7 02 2e 72 34 51 10 11 6d d0 83 77 98 83 b0 31 34 33 38 b6 45 55 52 5f 52 55 42 5f 5f 54 4f c4 06 8f 22 19 28 f1 3c 18 ea fc 24 15 f1 43 45 54 d3 ce b7 b1 31 34 34 31 b7 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 8b 22 19 30 d9 23 bc fd 03 72 95 77 e0 81 b0 33 30 30 38 b5 55 53 44 52 55 42 5f 53 50 d4 05 fa 22 19 28 f1 3c 6e ad fd 03 40 9f 81 00 eb cf",
            "38 ae 00 00 c0 1c 9a 02 5c b8 02 2e 72 34 51 10 29 58 86 81 77 98 83 b0 31 34 34 34 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 8c 22 19 30 d9 18 40 85 fd 03 4f 8b 43 45 54 d3 ce",
            "39 ae 00 00 c0 1c 9a 02 5c b9 02 2e 72 34 51 10 2b 43 96 81 77 98 83 b1 31 34 34 31 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 f7 22 19 30 d9 19 6a ec fc 23 47 e1 43 45 54 d3 ce",
            "3a ae 00 00 c0 1c 9a 02 5c ba 02 2e 72 34 51 10 32 6d e4 81 77 f8 81 b1 33 30 30 38 b6 47 4c 44 52 55 42 5f 54 4f cd 06 96 22 19 30 d9 20 64 af fe 0e 47 ce 82 97 cf 43 45 54 d3 ce",
            "3b ae 00 00 c0 1c 9a 02 5c bb 02 2e 72 34 51 10 34 58 ae 81 77 98 83 b1 31 34 34 31 b9 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 f8 22 19 30 d9 22 10 91 fc 23 47 e1 43 45 54 d3 ce",
            "3c ae 00 00 c0 1c 9a 02 5c bc 02 2e 72 34 51 10 38 2e e4 81 77 98 83 b1 31 34 34 32 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 f9 22 19 30 d9 25 4f e9 fc 23 47 e1 43 45 54 d3 ce",
            "3d ae 00 00 c0 1c 9a 02 5c bd 02 2e 72 34 51 10 3c 03 9b 81 77 98 83 b1 31 34 34 32 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 fa 22 19 30 d9 2a 2c dd fc 23 47 e1 43 45 54 d3 ce",
            "3e ae 00 00 c0 1c 9a 02 5c be 02 2e 72 34 51 10 3d 6f c7 82 77 98 83 b1 31 34 34 32 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 fb 22 19 30 d9 2b 52 e3 fc 23 47 e1 43 45 54 d3 ce 73 e0 81 b0 33 30 30 38 b7 45 55 52 52 55 42 5f 53 50 d4 06 aa 2b 76 e7 fd 03 51 8f 81 03 ca cf",
            "3f ae 00 00 c0 1c 9a 02 5c bf 02 2e 72 34 51 10 41 45 80 81 77 f8 81 b1 33 30 30 38 b8 45 55 52 52 55 42 5f 53 50 d4 06 ab 22 19 30 d9 2f 44 c6 fc 25 31 ad 81 02 d0 cf 43 45 54 d3 ce",
            "40 ae 00 00 c0 1c 9a 02 5c c0 02 2e 72 34 51 10 47 03 ce 81 77 98 83 b0 31 34 33 39 b1 43 4e 59 30 30 30 30 30 30 54 4f c4 06 8f 22 19 30 d9 35 00 cf fc 04 65 9b 43 45 54 d3 ce",
            "41 ae 00 00 c0 1c 9a 02 5c c1 02 2e 72 34 51 10 48 6f c4 82 77 98 83 b0 31 34 33 39 b2 43 4e 59 30 30 30 30 30 30 54 4f c4 06 90 22 19 30 d9 36 53 d5 fc 04 65 9b 43 45 54 d3 ce b3 b1 31 34 34 32 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 fc 37 46 f9 fc 23 47 e1",
            "42 ae 00 00 c0 1c 9a 02 5c c2 02 2e 72 34 51 10 5d 06 98 82 77 98 83 b0 31 34 34 32 b8 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 8d 22 19 38 c1 0d 3c 88 fd 03 4f 8b 43 45 54 d3 ce 82 31 34 34 33 b0 00 58 8e 0d 6b 92",
            "43 ae 00 00 c0 1c 9a 02 5c c3 02 2e 72 34 51 10 62 45 ed 81 77 98 83 b0 31 34 34 33 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 8f 22 19 38 c1 13 71 b6 fd 03 4f 8b 43 45 54 d3 ce",
            "44 ae 00 00 c0 1c 9a 02 5c c4 02 2e 72 34 51 10 69 71 ee 81 77 98 83 b0 31 34 34 30 b0 45 55 52 55 53 44 30 30 30 54 4f cd 06 f7 22 19 38 c1 1a 53 9c fb 06 3b ed 43 45 54 d3 ce",
            "45 ae 00 00 c0 1c 9a 02 5c c5 02 2e 72 34 51 10 6f 30 f2 81 77 98 83 b0 31 34 34 33 b2 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 90 22 19 38 c1 20 33 b7 fd 03 4f 8b 43 45 54 d3 ce",
            "46 ae 00 00 c0 1c 9a 02 5c c6 02 2e 72 34 51 10 73 07 f7 82 77 98 83 b0 31 34 34 33 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 fd 22 19 38 c1 23 5b ad fe 2c 8e 43 45 54 d3 ce 93 31 34 34 30 b2 45 55 52 55 53 44 30 30 30 54 4f cd 06 f8 24 39 ae fb 06 3b ed",
            "47 ae 00 00 c0 1c 9a 02 5c c7 02 2e 72 34 51 10 74 71 e6 81 77 98 83 b0 31 34 34 33 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 fe 22 19 38 c1 25 2f a9 fe 2c 8e 43 45 54 d3 ce",
            "48 ae 00 00 c0 1c 9a 02 5c c8 02 2e 72 34 51 10 7c 1c a2 81 77 98 83 b0 31 34 34 33 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 11 ff 22 19 38 c1 2d 33 a9 fe 2c 8e 43 45 54 d3 ce",
            "49 ae 00 00 c0 1c 9a 02 5c c9 02 2e 72 34 51 11 01 5c e8 81 77 98 83 b0 31 34 34 33 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 80 22 19 38 c1 33 0f f5 fe 2c 8e 43 45 54 d3 ce",
            "4a ae 00 00 c0 1c 9a 02 5c ca 02 2e 72 34 51 11 03 46 ee 81 77 98 83 b0 31 34 34 33 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 81 22 19 38 c1 33 6a 82 fe 2c 8e 43 45 54 d3 ce",
            "4b ae 00 00 c0 1c 9a 02 5c cb 02 2e 72 34 51 11 05 33 93 82 77 98 83 b0 31 34 34 33 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 82 22 19 38 c1 36 1b 9c fe 2c 8e 43 45 54 d3 ce 93 31 34 34 33 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 91 36 6f f6 fd 03 4f 8b",
            "4c ae 00 00 c0 1c 9a 02 5c cc 02 2e 72 34 51 11 0c 5c e6 81 77 98 83 b0 31 34 34 34 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 92 22 19 40 a9 39 83 fd 03 4f 8b 43 45 54 d3 ce",
            "4d ae 00 00 c0 1c 9a 02 5c cd 02 2e 72 34 51 11 0e 47 f6 81 77 f8 81 b0 33 30 30 38 b9 43 48 46 52 55 42 5f 54 4f cd 03 8f 22 19 40 a9 03 31 8e fc 22 17 cb 81 03 91 cf 43 45 54 d3 ce",
            "4e ae 00 00 c0 1c 9a 02 5c ce 02 2e 72 34 51 11 15 72 da 81 77 f8 81 b1 33 30 30 39 b0 47 42 50 52 55 42 5f 54 4f c4 06 c3 22 19 40 a9 0a 64 d6 fe 3a d4 81 01 e2 cf 43 45 54 d3 ce",
            "4f ae 00 00 c0 1c 9a 02 5c cf 02 2e 72 34 51 11 20 74 8e 82 77 98 83 b0 31 34 34 34 b6 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 93 22 19 40 a9 14 22 93 fd 03 4f 8b 43 45 54 d3 ce 82 31 34 34 34 b4 00 58 94 14 30 fe",
            "50 ae 00 00 c0 1c 9a 02 5c d0 02 2e 72 34 51 11 22 5e 85 81 77 98 83 b0 31 34 34 34 b7 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 95 22 19 40 a9 17 4c 8c fd 03 4f 8b 43 45 54 d3 ce",
            "51 ae 00 00 c0 1c 9a 02 5c d1 02 2e 72 34 51 11 26 33 d7 81 77 98 83 b0 31 34 34 34 b8 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 83 22 19 40 a9 1a 00 c7 fe 2c 8e 43 45 54 d3 ce",
            "52 ae 00 00 c0 1c 9a 02 5c d2 02 2e 72 34 51 11 2a 09 82 81 77 f8 81 b0 33 30 30 39 b1 47 42 50 52 55 42 5f 54 4f c4 06 c4 22 19 40 a9 1d 23 ee fc 2b 47 cb 81 00 c4 cf 43 45 54 d3 ce",
            "53 ae 00 00 c0 1c 9a 02 5c d3 02 2e 72 34 51 11 2d 5e f6 81 77 98 83 b0 31 34 34 34 b9 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 84 22 19 40 a9 22 1b 92 fe 2c 8e 43 45 54 d3 ce",
            "54 ae 00 00 c0 1c 9a 02 5c d4 02 2e 72 34 51 11 31 34 c4 81 77 98 83 b0 31 34 34 35 b0 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 85 22 19 40 a9 25 66 b2 fe 2c 8e 43 45 54 d3 ce",
            "55 ae 00 00 c0 1c 9a 02 5c d5 02 2e 72 34 51 11 36 75 e7 82 77 98 83 b0 31 34 34 35 b1 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 86 22 19 40 a9 2a 44 d8 fe 2c 8e 43 45 54 d3 ce 82 31 34 34 35 b2 01 12 87 2b 68 d6",
            "56 ae 00 00 c0 1c 9a 02 5c d6 02 2e 72 34 51 11 43 60 d9 81 77 98 83 b0 31 34 34 35 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 88 22 19 40 a9 37 50 ff fe 2c 8e 43 45 54 d3 ce",
            "57 ae 00 00 c0 1c 9a 02 5c d7 02 2e 72 34 51 11 50 4b de 81 77 f8 81 b1 33 30 30 39 b2 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 96 22 19 48 91 07 04 d1 fc 26 14 fb 81 16 5f af cf 43 45 54 d3 ce",
            "58 ae 00 00 c0 1c 9a 02 5c d8 02 2e 72 34 51 11 56 0c a9 81 77 f8 81 b0 33 30 30 39 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 97 22 19 48 91 0d 44 f3 fc 23 44 9f 81 02 a0 cf 43 45 54 d3 ce",
            "59 ae 00 00 c0 1c 9a 02 5c d9 02 2e 72 34 51 11 62 77 d4 81 77 f8 81 b1 33 30 30 39 b4 45 55 52 52 55 42 5f 30 36 31 b7 06 c5 22 19 48 91 19 61 9d fe 32 93 81 8c cf 46 55 54 d3 ce",
            "5a ae 00 00 c0 1c 9a 02 5c da 02 2e 72 34 51 11 68 37 c8 81 77 f8 81 b0 33 30 30 39 b5 45 55 52 52 55 42 5f 30 36 31 b7 06 c6 22 19 48 91 1f 0b ac fe 2e ab 81 83 cf 46 55 54 d3 ce",
            "5b ae 00 00 c0 1c 9a 02 5c db 02 2e 72 34 51 11 7c 4e c1 81 77 f8 81 b0 33 30 30 39 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 89 22 19 48 91 33 7a ca fc 21 54 81 81 03 8d cf 43 45 54 d3 ce",
            "5c ae 00 00 c0 1c 9a 02 5c dc 02 2e 72 34 51 12 03 7b 99 82 77 98 83 b0 31 34 34 32 b1 43 4e 59 52 55 42 5f 54 4f cd 06 ca 22 19 48 91 3a 28 84 fc 04 6b d0 43 45 54 d3 ce 73 e0 81 b1 33 30 30 39 b7 45 55 52 55 53 44 30 30 30 54 4f c4 03 fc 3a 02 e6 fb 06 48 a3 81 02 e7 cf",
            "5d ae 00 00 c0 1c 9a 02 5c dd 02 2e 72 34 51 12 05 65 c3 82 77 98 83 b0 31 34 34 32 b0 43 4e 59 52 55 42 5f 54 4f cd 06 cb 22 19 48 91 3d 02 fe fc 04 6b d0 43 45 54 d3 ce 57 f0 81 33 30 30 39 b8 55 53 44 52 55 42 5f 30 36 31 b7 07 a9 22 19 4f f9 26 ae fe 2c ca 81 8c cf 46 55 54 d3",
            "5e ae 00 00 c0 1c 9a 02 5c de 02 2e 72 34 51 12 19 7b cb 82 77 f8 81 b0 33 30 30 39 b9 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 98 22 19 4f f9 14 35 ae fe 2d f7 81 01 ec cf 43 45 54 d3 ce 23 c0 b1 33 30 31 30 b0 00 58 99 14 43 93 fc 26 6e 83 81 01 a6",
            "5f ae 00 00 c0 1c 9a 02 5c df 02 2e 72 34 51 12 1d 50 ab 81 77 f8 81 b1 33 30 31 30 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 9a 22 19 4f f9 17 65 f2 fc 25 5f eb 81 01 d6 cf 43 45 54 d3 ce",
            "60 ae 00 00 c0 1c 9a 02 5c e0 02 2e 72 34 51 12 1f 3b a7 81 77 98 83 b0 31 34 34 32 b6 43 48 46 52 55 42 5f 54 4f c4 06 91 22 19 4f f9 19 64 da fc 21 5c ff 43 45 54 d3 ce",
            "61 ae 00 00 c0 1c 9a 02 5c e1 02 2e 72 34 51 12 23 10 9f 81 77 98 83 b0 31 34 34 32 b7 53 4c 56 52 55 42 5f 54 4f cd 04 f0 22 19 4f f9 1c 32 83 fe 17 f5 43 45 54 d3 ce",
            "62 ae 00 00 c0 1c 9a 02 5c e2 02 2e 72 34 51 12 28 50 b6 81 77 f8 81 b0 33 30 31 30 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 8a 22 19 4f f9 22 2c b8 fc 21 54 81 81 03 8d cf 43 45 54 d3 ce",
            "63 ae 00 00 c0 1c 9a 02 5c e3 02 2e 72 34 51 12 2f 7b cb 81 77 f8 81 b0 33 30 31 30 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 8b 22 19 4f f9 2a 5e 84 fc 21 54 81 81 03 8d cf 43 45 54 d3 ce",
            "64 ae 00 00 c0 1c 9a 02 5c e4 02 2e 72 34 51 12 31 66 b0 81 77 f8 81 b1 33 30 31 30 b4 55 53 44 30 30 30 30 30 30 54 4f c4 06 dd 22 19 4f f9 2b 5f 96 fe 2d a6 81 17 9b cf 43 45 54 d3 ce",
            "65 ae 00 00 c0 1c 9a 02 5c e5 02 2e 72 34 51 12 33 52 86 82 77 98 83 b0 31 34 34 32 b9 43 48 46 52 55 42 5f 54 4f c4 06 92 22 19 4f f9 2c 77 b2 fc 21 5c ff 43 45 54 d3 ce 73 e0 81 b1 33 30 31 30 b5 55 53 44 30 30 30 30 30 30 54 4f c4 06 de 2e 12 c4 fe 2d a6 81 17 9b cf",
            "66 ae 00 00 c0 1c 9a 02 5c e6 02 2e 72 34 51 12 3e 52 86 81 77 f8 81 b0 33 30 31 30 b6 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 8c 22 19 4f f9 37 6b 82 fc 21 54 81 81 03 8d cf 43 45 54 d3 ce",
            "67 ae 00 00 c0 1c 9a 02 5c e7 02 2e 72 34 51 12 50 7d ee 81 77 f8 81 b1 33 30 31 30 b7 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 9b 22 19 57 e1 0e 0f cf fc 26 46 c9 81 01 ed cf 43 45 54 d3 ce",
            "68 ae 00 00 c0 1c 9a 02 5c e8 02 2e 72 34 51 12 56 3d fe 81 77 98 83 b0 31 34 34 36 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 9c 22 19 57 e1 14 0e ea fc 25 04 85 43 45 54 d3 ce",
            "69 ae 00 00 c0 1c 9a 02 5c e9 02 2e 72 34 51 12 5a 14 a8 81 77 f8 81 b0 33 30 31 30 b8 47 42 50 52 55 42 5f 54 4f cd 06 b5 22 19 57 e1 16 42 f0 fc 2a 41 9b 81 01 8a cf 43 45 54 d3 ce",
            "6a ae 00 00 c0 1c 9a 02 5c ea 02 2e 72 34 51 12 5f 54 f5 81 77 f8 81 b0 33 30 31 30 b9 45 55 52 5f 52 55 42 5f 5f 54 4f c4 06 90 22 19 57 e1 1c 4d ef fd 03 4d c3 81 00 46 eb cf 43 45 54 d3 ce",
            "6b ae 00 00 c0 1c 9a 02 5c eb 02 2e 72 34 51 12 61 3f fb 82 77 98 83 b0 31 34 34 34 b0 55 53 44 52 55 42 5f 53 50 d4 05 fb 22 19 57 e1 1e 54 a1 fc 22 3c a7 43 45 54 d3 ce 73 e0 81 b1 33 30 31 31 b0 45 55 52 5f 52 55 42 5f 5f 54 4f c4 06 91 1d 7d f5 fc 25 23 a5 81 01 34 a9 cf",
            "6c ae 00 00 c0 1c 9a 02 5c ec 02 2e 72 34 51 12 63 29 cc 81 77 98 83 b0 31 34 34 34 b2 55 53 44 52 55 42 5f 53 50 d4 05 fc 22 19 57 e1 1f 45 fb fc 22 3c a7 43 45 54 d3 ce",
            "6d ae 00 00 c0 1c 9a 02 5c ed 02 2e 72 34 51 12 65 14 d2 81 77 f8 81 b0 33 30 31 31 b1 47 42 50 52 55 42 5f 54 4f cd 06 b6 22 19 57 e1 21 19 f7 fc 2a 41 9b 81 01 8a cf 43 45 54 d3 ce",
            "6e ae 00 00 c0 1c 9a 02 5c ee 02 2e 72 34 51 12 66 7f e7 81 77 98 83 b0 31 34 34 36 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 8d 22 19 57 e1 23 77 88 fc 21 72 bd 43 45 54 d3 ce",
            "6f ae 00 00 c0 1c 9a 02 5c ef 02 2e 72 34 51 12 68 6a 95 81 77 98 83 b0 31 34 34 36 b3 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 8e 22 19 57 e1 25 48 c8 fc 21 72 bd 43 45 54 d3 ce",
            "70 ae 00 00 c0 1c 9a 02 5c f0 02 2e 72 34 51 12 70 15 cf 81 77 98 83 b0 31 34 34 36 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 8f 22 19 57 e1 2d 5c ea fc 21 72 bd 43 45 54 d3 ce",
            "71 ae 00 00 c0 1c 9a 02 5c f1 02 2e 72 34 51 12 75 55 ba 81 77 98 83 b0 31 34 34 36 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 90 22 19 57 e1 33 31 a5 fc 21 72 bd 43 45 54 d3 ce",
            "72 ae 00 00 c0 1c 9a 02 5c f2 02 2e 72 34 51 12 77 40 ed 81 77 f8 81 b1 33 30 31 31 b2 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 91 22 19 57 e1 34 19 9f fc 23 52 d9 81 01 e7 cf 43 45 54 d3 ce",
            "73 ae 00 00 c0 1c 9a 02 5c f3 02 2e 72 34 51 12 79 2b bb 81 77 98 83 b0 31 34 34 36 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 92 22 19 57 e1 36 46 c6 fc 21 72 bd 43 45 54 d3 ce",
            "74 ae 00 00 c0 1c 9a 02 5c f4 02 2e 72 34 51 12 7b 15 ed 81 77 98 83 b0 31 34 34 36 b8 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 9d 22 19 57 e1 37 16 99 fc 25 04 85 43 45 54 d3 ce",
            "75 ae 00 00 c0 1c 9a 02 5c f5 02 2e 72 34 51 13 00 56 b0 81 77 98 83 b0 31 34 34 37 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 9e 22 19 5f c9 59 b1 fc 25 04 85 43 45 54 d3 ce",
            "76 ae 00 00 c0 1c 9a 02 5c f6 02 2e 72 34 51 13 0d 41 d2 81 77 98 83 b0 31 34 34 35 b3 45 55 52 52 55 42 5f 53 50 d4 06 ac 22 19 5f c9 0d 4f c5 fc 23 67 b3 43 45 54 d3 ce",
            "77 ae 00 00 c0 1c 9a 02 5c f7 02 2e 72 34 51 13 0f 2c ab 81 77 98 83 b1 31 34 34 35 b4 48 4b 44 52 55 42 5f 54 4f c4 08 cc 22 19 5f c9 0f 02 d1 fc 04 4a f8 43 45 54 d3 ce",
            "78 ae 00 00 c0 1c 9a 02 5c f8 02 2e 72 34 51 13 11 18 97 82 77 98 83 b0 31 34 34 35 b6 45 55 52 52 55 42 5f 53 50 d4 06 ad 22 19 5f c9 11 16 9c fc 23 67 b3 43 45 54 d3 ce 53 e0 81 33 30 31 31 b3 47 4c 44 52 55 42 5f 54 4f cd 06 97 11 29 af fe 0d 7b fa 81 02 81 cf",
            "79 ae 00 00 c0 1c 9a 02 5c f9 02 2e 72 34 51 13 14 6d 95 82 77 98 83 b0 31 34 34 37 b2 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 9f 22 19 5f c9 14 52 c5 fc 25 04 85 43 45 54 d3 ce 63 e0 81 b1 33 30 31 31 b4 00 58 a0 14 51 d3 fc 26 31 ef 81 02 b5 cf",
            "7a ae 00 00 c0 1c 9a 02 5c fa 02 2e 72 34 51 13 16 57 f6 81 77 f8 81 b1 33 30 31 31 b5 43 4e 59 30 30 30 30 30 30 54 4f c4 06 91 22 19 5f c9 16 4d ad fe 06 cf 81 03 df cf 43 45 54 d3 ce",
            "7b ae 00 00 c0 1c 9a 02 5c fb 02 2e 72 34 51 13 18 43 b0 82 77 98 83 b0 31 34 34 37 b3 45 55 52 5f 52 55 42 5f 5f 54 4f cd 00 58 a1 22 19 5f c9 17 7f 84 fc 25 04 85 43 45 54 d3 ce 53 e0 81 33 30 31 31 b6 43 4e 59 30 30 30 30 30 30 54 4f c4 06 92 18 21 aa fc 04 6f 83 81 01 d4 cf",
            "7c ae 00 00 c0 1c 9a 02 5c fc 02 2e 72 34 51 13 1a 2d 96 81 77 98 83 b0 31 34 34 37 b4 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 93 22 19 5f c9 1a 13 ba fc 21 72 bd 43 45 54 d3 ce",
            "7d ae 00 00 c0 1c 9a 02 5c fd 02 2e 72 34 51 13 23 43 b9 81 77 f8 81 b1 33 30 31 31 b7 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 94 22 19 5f c9 22 47 d8 fc 23 52 d9 81 01 e7 cf 43 45 54 d3 ce",
            "7e ae 00 00 c0 1c 9a 02 5c fe 02 2e 72 34 51 13 25 2d f3 81 77 98 83 b0 31 34 34 37 b5 55 53 44 30 30 30 55 54 53 54 4f cd 01 12 95 22 19 5f c9 26 07 ce fc 21 72 bd 43 45 54 d3 ce"
    };

    unsigned char **packets = new unsigned char *[311];
    int *sizes = new int[311];
    int *counts = new int[311];
    UINT64 *timens = new UINT64[311];
    for (int i = 0; i < 311; i++) {
        packets[i] = DebugInfoManager::Default->StringToBinary(olr_curr[i], sizes + i);
        //printf("packet %d size = %d\n", i, sizes[i]);
        timens[i] = 0;
    }

    FastProtocolManager *manager = new FastProtocolManager();
    for(int i = 0; i < 311; i++) {
        manager->SetNewBuffer(packets[i], sizes[i]);
        manager->SkipMsgSeqNumber();
        manager->ParseHeaderFast();
        AstsIncrementalOLRCURRInfo *info = manager->DecodeAstsIncrementalOLRCURR();
        counts[i] = info->GroupMDEntriesCount;
        info->Clear();
        printf("packet %d itemCount = %d  mask = %" PRIu64 "\n", i, info->GroupMDEntriesCount, info->GroupMDEntries[0]->PresenceMap);
    }

    Stopwatch *w = new Stopwatch();

    manager->PrefetchAstsIncrementalOLRCURRInfo();
    for (int msg = 0; msg < 311; msg++) {
        w->StartPrecise(1);
        manager->SetNewBuffer(packets[msg], sizes[msg]);
        if(msg < 310)
            manager->Prefetch(packets[msg+1], sizes[msg+1]);
        manager->SkipMsgSeqNumber();
        manager->ParseHeaderFast();
        AstsIncrementalOLRCURRInfo *info = manager->DecodeAstsIncrementalOLRCURR();
        UINT64 ns = w->ElapsedNanosecondsSlowPrecise(1);
        timens[msg] = ns;
        manager->PrefetchAstsOLSCURRItemInfo();
    }
    for (int i = 0; i < 311; i++) {
        printf("%d size = %d count = %d time = %" PRIu64 " ns\n", i, sizes[i], counts[i], timens[i]);
    }
    getchar();
}

void FastProtocolTester::TestMessages() {
    unsigned char *message = 0;
    int msgSeqNo = 0;

    message = new unsigned char[103] {
            0xc3    ,0xf6   ,0x02   ,0x00   ,0xc0   ,0x8c   ,0x0b   ,0x6d
            ,0xc3   ,0x23   ,0x6a   ,0x19   ,0x54   ,0x78   ,0x37   ,0x13
            ,0xfb   ,0x82   ,0x82   ,0x82   ,0xb1   ,0x19   ,0x4a   ,0xc4
            ,0x80   ,0x80   ,0x48   ,0xec   ,0x03   ,0x04   ,0x87   ,0x82
            ,0x82   ,0x80   ,0xfb   ,0x15   ,0x6f   ,0x28   ,0x7e   ,0xc0
            ,0x81   ,0x80   ,0x15   ,0x3e   ,0x7b   ,0x1e   ,0x10   ,0x32
            ,0xec   ,0x80   ,0x80   ,0x80   ,0x80   ,0x80   ,0x80   ,0x0f
            ,0x30   ,0x2b   ,0x6e   ,0xc7   ,0x80   ,0x80   ,0xb1   ,0x19
            ,0x4a   ,0xc4   ,0x80   ,0x80   ,0x48   ,0xec   ,0x03   ,0x04
            ,0x88   ,0x82   ,0x82   ,0x80   ,0xfb   ,0x15   ,0x6f   ,0x3b
            ,0x26   ,0xa0   ,0x94   ,0x80   ,0x15   ,0x3e   ,0x7b   ,0x1e
            ,0x10   ,0x32   ,0xec   ,0x80   ,0x80   ,0x80   ,0x80   ,0x80
            ,0x80   ,0x0f   ,0x30   ,0x2b   ,0x6e   ,0xcd   ,0x80
    };

    manager->SetNewBuffer(message, 103);
    msgSeqNo = manager->ReadMsgSeqNumber();
    manager->DecodeFortsHeader();
    FortsDefaultIncrementalRefreshMessageInfo *fr = (FortsDefaultIncrementalRefreshMessageInfo*)manager->DecodeFortsDefaultIncrementalRefreshMessage();
    if(fr->MDEntriesCount != 2)
        throw;
    if(fr->MDEntries[0]->SecurityID != 419139)
        throw;
    if(fr->MDEntries[1]->SecurityID != 419139)
        throw;
    manager->PrintFortsDefaultIncrementalRefreshMessage(fr);


    message = new unsigned char[77] {
            0x09, 0x63, 0x0d, 0x00, 0xc0, 0x1c, 0x9d, 0x35, 0x46, 0x89,
            0x02, 0x2e, 0x45, 0x19, 0x0e, 0x64, 0x66, 0x3e, 0xba, 0x02,
            0x2e, 0x45, 0x19, 0x0e, 0x64, 0x65, 0x4c, 0xb7, 0x81, 0x82,
            0xf6, 0x80, 0x43, 0x4e, 0x59, 0x52, 0x55, 0x42, 0x54, 0x4f,
            0x44, 0x54, 0x4f, 0xcd, 0x00, 0x6b, 0xc0, 0x80, 0x81, 0x08,
            0x41, 0xdc, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x04, 0x9e, 0x80, 0x80,
            0x80, 0x80, 0x43, 0x45, 0x54, 0xd3, 0x80 };

    manager->SetNewBuffer(message, 77);
    msgSeqNo = manager->ReadMsgSeqNumber();
    manager->DecodeAsts();
    AstsIncrementalMSRCURRInfo *mm = (AstsIncrementalMSRCURRInfo*)manager->LastDecodeInfo();

    message = new unsigned char[963] {
            0x8f, 0x01, 0x00, 0x00, 0xc0, 0x1c, 0x90, 0x03, 0x8f, 0x02, 0x2e, 0x42, 0x75, 0x3f, 0x41, 0x65, 0x0f, 0x9a,
            0x30, 0x46, 0xb9, 0x01, 0x36, 0x9e, 0x81, 0x82, 0x00, 0xe5, 0x43, 0x45, 0x54, 0xd3, 0x48, 0x4b, 0x44, 0x52,
            0x55, 0x42, 0x5f, 0x54, 0x4f, 0xcd, 0x92, 0xac, 0x5f, 0xc0, 0xb0, 0x37, 0x39, 0x39, 0x32, 0x33, 0xb3, 0x58,
            0x24, 0x15, 0xf1, 0x34, 0x04, 0xc7, 0xfc, 0x05, 0x2f, 0xeb, 0x81, 0x01, 0xd9, 0xcf, 0xce, 0xde, 0xb1, 0x37,
            0x39, 0x39, 0x33, 0x36, 0xb1, 0x58, 0x24, 0x44, 0xe1, 0x16, 0x02, 0x96, 0xfc, 0x05, 0x59, 0x9b, 0x81, 0x00,
            0xd1, 0xde, 0xb0, 0x37, 0x39, 0x39, 0x34, 0x32, 0xb0, 0x58, 0x24, 0x5c, 0x99, 0x07, 0x29, 0x82, 0xfc, 0x05,
            0x33, 0x8d, 0x81, 0x03, 0x84, 0x9e, 0x37, 0x39, 0x39, 0x36, 0x37, 0xb3, 0x58, 0x25, 0x1a, 0xd9, 0x34, 0x63,
            0xe2, 0xfc, 0x05, 0x21, 0xbb, 0x81, 0x00, 0xf4, 0x9e, 0x37, 0x39, 0x39, 0x38, 0x39, 0xb8, 0x58, 0x28, 0x11,
            0xd9, 0x2f, 0x27, 0xcd, 0xfc, 0x05, 0x28, 0x89, 0x81, 0x02, 0x89, 0xde, 0xb1, 0x38, 0x30, 0x30, 0x32, 0x35,
            0xb7, 0x58, 0x28, 0x7f, 0x89, 0x18, 0x24, 0xa7, 0xfc, 0x05, 0x58, 0xd4, 0x81, 0x03, 0xb7, 0x9e, 0x38, 0x30,
            0x30, 0x33, 0x34, 0xb3, 0x58, 0x29, 0x16, 0xc1, 0x09, 0x5e, 0xfc, 0xfc, 0x05, 0x5f, 0xc0, 0x81, 0x02, 0x8a,
            0xce, 0xb0, 0x38, 0x30, 0x30, 0x33, 0x34, 0xb5, 0x11, 0x1a, 0xb4, 0xfc, 0x05, 0x21, 0xaa, 0x81, 0x03, 0x8d,
            0x9e, 0x38, 0x30, 0x30, 0x34, 0x32, 0xb9, 0x58, 0x29, 0x2d, 0xf9, 0x18, 0x24, 0xc0, 0xfc, 0x05, 0x2a, 0x8f,
            0x81, 0x00, 0xce, 0xde, 0xb1, 0x38, 0x30, 0x30, 0x34, 0x39, 0xb1, 0x58, 0x29, 0x3d, 0xc9, 0x28, 0x5f, 0xc3,
            0xfc, 0x05, 0x6b, 0xf1, 0x81, 0x02, 0xf4, 0x9e, 0x38, 0x30, 0x30, 0x35, 0x39, 0xb0, 0x58, 0x29, 0x55, 0x81,
            0x36, 0x7b, 0xb1, 0xfc, 0x05, 0x5d, 0x99, 0x81, 0x02, 0x9e, 0x9e, 0x38, 0x30, 0x30, 0x36, 0x35, 0xb6, 0x58,
            0x29, 0x6c, 0xb9, 0x0a, 0x5c, 0xb7, 0xfc, 0x05, 0x5e, 0xaf, 0x81, 0x03, 0xcb, 0x8e, 0x38, 0x30, 0x30, 0x36,
            0x36, 0xb0, 0x12, 0x0f, 0x94, 0xfc, 0x05, 0x70, 0xff, 0x81, 0x01, 0x8a, 0x9e, 0x38, 0x30, 0x30, 0x38, 0x31,
            0xb3, 0x58, 0x2a, 0x13, 0xc1, 0x31, 0x10, 0x87, 0xfc, 0x05, 0x6b, 0xf9, 0x81, 0x02, 0xd2, 0xde, 0xb0, 0x38,
            0x30, 0x30, 0x39, 0x39, 0xb0, 0x58, 0x2a, 0x52, 0x81, 0x38, 0x62, 0xb1, 0xfd, 0x00, 0x43, 0xc7, 0x81, 0x02,
            0xc4, 0xde, 0xb1, 0x38, 0x30, 0x31, 0x30, 0x30, 0xb1, 0x58, 0x2a, 0x59, 0xe9, 0x19, 0x62, 0xa7, 0xfc, 0x05,
            0x74, 0xa6, 0x81, 0x01, 0x94, 0xde, 0xb0, 0x38, 0x30, 0x31, 0x30, 0x36, 0xb8, 0x58, 0x2a, 0x69, 0xb9, 0x2a,
            0x44, 0xeb, 0xfd, 0x00, 0x44, 0xef, 0x81, 0x02, 0xec, 0xce, 0xb1, 0x38, 0x30, 0x31, 0x30, 0x37, 0xb2, 0x31,
            0x5e, 0xaa, 0xfc, 0x05, 0x71, 0xdc, 0x81, 0x01, 0x90, 0x9e, 0x38, 0x30, 0x31, 0x31, 0x33, 0xb6, 0x58, 0x2b,
            0x00, 0xf1, 0x38, 0x64, 0xbf, 0xfc, 0x05, 0x5f, 0xa0, 0x81, 0x02, 0xe5, 0x9e, 0x38, 0x30, 0x31, 0x32, 0x31,
            0xb4, 0x58, 0x2b, 0x18, 0xa9, 0x13, 0x5b, 0xca, 0xfc, 0x05, 0x75, 0x81, 0x81, 0x01, 0xb2, 0xde, 0xb0, 0x38,
            0x30, 0x31, 0x33, 0x30, 0xb0, 0x58, 0x2b, 0x27, 0xf9, 0x39, 0x52, 0x8c, 0xfc, 0x05, 0x27, 0xc2, 0x81, 0x03,
            0xa2, 0xde, 0xb1, 0x38, 0x30, 0x31, 0x36, 0x37, 0xb1, 0x58, 0x2e, 0x4d, 0xe9, 0x33, 0x1e, 0xd1, 0xfc, 0x05,
            0x63, 0xde, 0x81, 0x01, 0xf4, 0x9e, 0x38, 0x30, 0x31, 0x37, 0x36, 0xb6, 0x58, 0x2e, 0x65, 0xa1, 0x3a, 0x15,
            0xb1, 0xfc, 0x05, 0x69, 0xd8, 0x82, 0x81, 0xde, 0xb0, 0x38, 0x30, 0x31, 0x38, 0x30, 0xb4, 0x58, 0x2e, 0x7c,
            0xd9, 0x0e, 0x21, 0xd0, 0xfc, 0x05, 0x34, 0xf0, 0x81, 0x01, 0x92, 0x8e, 0x38, 0x30, 0x31, 0x38, 0x30, 0xb7,
            0x14, 0x77, 0xc8, 0xfc, 0x05, 0x3c, 0x90, 0x81, 0x00, 0xfa, 0xde, 0xb1, 0x38, 0x30, 0x31, 0x38, 0x36, 0xb4,
            0x58, 0x2f, 0x0c, 0xa9, 0x3a, 0x5b, 0xb2, 0xff, 0x00, 0xe1, 0x81, 0x01, 0x8a, 0x9e, 0x38, 0x30, 0x31, 0x38,
            0x38, 0xb3, 0x58, 0x2f, 0x14, 0x91, 0x1c, 0x12, 0x81, 0xfc, 0x05, 0x5e, 0xc5, 0x81, 0x03, 0xa0, 0x9e, 0x38,
            0x30, 0x32, 0x30, 0x37, 0xb5, 0x58, 0x2f, 0x52, 0xd1, 0x0f, 0x16, 0xc8, 0xfc, 0x05, 0x70, 0x93, 0x81, 0x02,
            0xe6, 0x9e, 0x38, 0x30, 0x32, 0x33, 0x31, 0xb1, 0x58, 0x30, 0x11, 0x91, 0x1d, 0x42, 0x90, 0xfc, 0x05, 0x72,
            0xe6, 0x81, 0x01, 0xcc, 0xde, 0xb0, 0x38, 0x30, 0x32, 0x37, 0x39, 0xb5, 0x58, 0x31, 0x25, 0xc9, 0x2f, 0x26,
            0x9b, 0xfc, 0x05, 0x35, 0xb7, 0x81, 0x01, 0x92, 0x9e, 0x38, 0x30, 0x32, 0x38, 0x35, 0xb9, 0x58, 0x33, 0x75,
            0xc1, 0x3c, 0x3a, 0xb0, 0xfc, 0x05, 0x2e, 0xdd, 0x81, 0x03, 0xc9, 0x9e, 0x38, 0x30, 0x33, 0x31, 0x30, 0xb3,
            0x58, 0x34, 0x34, 0x81, 0x35, 0x63, 0x8b, 0xfc, 0x05, 0x23, 0x83, 0x81, 0xa1, 0x9e, 0x38, 0x30, 0x33, 0x31,
            0x33, 0xb6, 0x58, 0x34, 0x4b, 0xb9, 0x1f, 0x24, 0x93, 0xfc, 0x05, 0x24, 0xde, 0x81, 0x03, 0xb6, 0x9e, 0x38,
            0x30, 0x33, 0x34, 0x38, 0xb9, 0x58, 0x35, 0x38, 0xe9, 0x12, 0x28, 0xa0, 0xfc, 0x05, 0x30, 0x8b, 0x81, 0xbd,
            0xde, 0xb1, 0x38, 0x30, 0x33, 0x36, 0x34, 0xb3, 0x58, 0x35, 0x5f, 0xf1, 0x31, 0x03, 0x92, 0xfc, 0x05, 0x60,
            0xb5, 0x81, 0x03, 0xe3, 0x9e, 0x38, 0x30, 0x33, 0x39, 0x33, 0xb7, 0x58, 0x36, 0x4d, 0xa1, 0x21, 0x2b, 0xce,
            0xfd, 0x00, 0x4a, 0xff, 0x81, 0x01, 0xdd, 0xde, 0xb0, 0x38, 0x30, 0x33, 0x39, 0x35, 0xb1, 0x58, 0x36, 0x55,
            0x89, 0x02, 0x18, 0xd6, 0xfc, 0x05, 0x28, 0xc3, 0x81, 0x00, 0xdb, 0x9e, 0x38, 0x30, 0x34, 0x30, 0x32, 0xb3,
            0x58, 0x36, 0x64, 0xd9, 0x13, 0x4a, 0xef, 0xfc, 0x05, 0x21, 0xbf, 0x81, 0x02, 0xeb, 0x9c, 0x38, 0x30, 0x34,
            0x30, 0x38, 0xb2, 0x58, 0x36, 0x7c, 0x91, 0x21, 0x0a, 0x82, 0xfc, 0x05, 0x33, 0xb7, 0x9e, 0x38, 0x30, 0x34,
            0x34, 0x39, 0xb5, 0x58, 0x3a, 0x39, 0xb9, 0x03, 0x26, 0x80, 0xfc, 0x05, 0x3c, 0xb6, 0x81, 0x90, 0x9e, 0x38,
            0x30, 0x34, 0x36, 0x30, 0xb3, 0x58, 0x3a, 0x60, 0xc1, 0x21, 0x7a, 0xaa, 0xfd, 0x00, 0x43, 0xc9, 0x82, 0xb0,
            0x9e, 0x38, 0x30, 0x34, 0x36, 0x34, 0xb8, 0x58, 0x3a, 0x70, 0x91, 0x39, 0x10, 0xa4, 0xfc, 0x05, 0x21, 0xfb,
            0x81, 0x02, 0xe6, 0x9e, 0x38, 0x30, 0x34, 0x37, 0x32, 0xb9, 0x58, 0x3b, 0x0f, 0xb1, 0x03, 0x60, 0xe1, 0xfc,
            0x05, 0x39, 0xd8, 0x82, 0x91, 0xde, 0xb1, 0x38, 0x30, 0x34, 0x39, 0x34, 0xb9, 0x58, 0x3b, 0x46, 0x89, 0x39,
            0x62, 0x80, 0xfc, 0x05, 0x5b, 0x9e, 0x81, 0x00, 0xc4
    };
    manager->SetNewBuffer(message, 963);
    msgSeqNo = manager->ReadMsgSeqNumber();
    manager->DecodeAsts();
    AstsOLSCURRInfo *oc = (AstsOLSCURRInfo*)manager->LastDecodeInfo();
    for(int i = 0; i < oc->GroupMDEntriesCount; i++) {
        if(oc->GroupMDEntries[i]->MDEntryType[0] != '0')
            throw;
    }

    int msgSize = 0;
    message = DebugInfoManager::Default->StringToBinary("0f 50 05 00 c0 1c 9a 15 20 8f 02 2e 2d 43 6f 62 77 6c 86 84 77 98 83 b1 32 39 34 39 34 b1 45 55 52 5f 52 55 42 5f 5f 54 4f cd 08 5a fc 3e 06 50 a1 1e 1d ed fe 37 aa 43 45 54 d3 ce 82 32 39 34 39 34 b4 08 5a fd 1e 24 d4 53 e0 81 33 33 31 32 32 b7 48 4b 44 52 55 42 5f 54 4f cd 00 41 8d 1e 47 f9 fc 08 13 dc 81 01 ea cf 13 c0 33 33 31 32 32 b8 47 4c 44 52 55 42 54 4f 44 54 4f cd 27 ba 1f 64 a8 fc 01 04 a1 81 02 93", &msgSize);
    manager->SetNewBuffer(message, msgSize);
    msgSeqNo = manager->ReadMsgSeqNumber();
    AstsIncrementalOLRCURRInfo *olsCurr2 = (AstsIncrementalOLRCURRInfo*)manager->DecodeAsts();
    if(olsCurr2->GroupMDEntries[1]->MDEntryType != olsCurr2->GroupMDEntries[0]->MDEntryType)
        throw;

    message = new unsigned char[94] {
            0x9f, 0xa4, 0x04, 0x00, 0xc0, 0x1c, 0x9a, 0x12, 0x49, 0x9f,
            0x02, 0x2e, 0x2d, 0x43, 0x4c, 0x22, 0x74, 0x16, 0xbb, 0x82,
            0x77, 0x98, 0x83, 0xb0, 0x32, 0x35, 0x32, 0x31, 0x37, 0xb4,
            0x43, 0x4e, 0x59, 0x52, 0x55, 0x42, 0x54, 0x4f, 0x44, 0x54,
            0x4f, 0xcd, 0x1f, 0xe6, 0x39, 0x41, 0x02, 0xf9, 0x07, 0xa6,
            0xfa, 0x3a, 0x91, 0x43, 0x45, 0x54, 0xd3, 0xce, 0x57, 0xe0,
            0x81, 0x32, 0x39, 0x30, 0x39, 0x37, 0xb3, 0x43, 0x48, 0x46,
            0x52, 0x55, 0x42, 0x5f, 0x54, 0x4f, 0xc4, 0x37, 0xff, 0x39,
            0x40, 0x7b, 0x91, 0x3c, 0x50, 0x81, 0xfe, 0x00, 0x4e, 0xac,
            0x81, 0x01, 0xe9, 0xcf
    };

    manager->SetNewBuffer(message, 130);
    msgSeqNo = manager->ReadMsgSeqNumber();
    AstsIncrementalOLRCURRInfo *olsCurr1 = (AstsIncrementalOLRCURRInfo*)manager->DecodeAsts();
    if(!StringIdComparer::Equal(olsCurr1->GroupMDEntries[0]->TradingSessionID,
                                4, "CETS", 4))
        throw;

    message = new unsigned char[130] {
            0x89, 0x30, 0x00, 0x00, 0xe0, 0x10, 0xc3, 0x61, 0x89, 0x02,
            0x16, 0x48, 0x54, 0x42, 0x3c, 0x26, 0xb9, 0x00, 0x65, 0xa7,
            0x4d, 0x4f, 0x45, 0x58, 0x52, 0x45, 0x50, 0xcf, 0x80, 0x80,
            0x88, 0x87, 0x4d, 0x52, 0x49, 0x58, 0x58, 0x58, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x94, 0x4d, 0x4f,
            0x45, 0x58, 0x52, 0x45, 0x50, 0x4f, 0x20, 0x42, 0x6f, 0x6e,
            0x64, 0x20, 0x31, 0x32, 0x3a, 0x33, 0x30, 0x96, 0x4d, 0x4f,
            0x45, 0x58, 0x52, 0x45, 0x50, 0x4f, 0x20, 0xd0, 0xbe, 0xd0,
            0xb1, 0xd0, 0xbb, 0x20, 0x31, 0x32, 0x3a, 0x33, 0x30, 0x80,
            0x82, 0x9b, 0x82, 0x32, 0x80, 0x82, 0x80, 0x82, 0x54, 0x51,
            0x42, 0xd2, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x87, 0x4d,
            0x58, 0x52, 0x45, 0x50, 0x4f, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80
    };

    manager->SetNewBuffer(message, 130);
    msgSeqNo = manager->ReadMsgSeqNumber();
    AstsSecurityDefinitionInfo *sec = (AstsSecurityDefinitionInfo*)manager->DecodeAsts();
    manager->PrintAstsSecurityDefinition(sec);

    if(sec->MarketSegmentGrpCount != 1)
        throw;
    if(sec->MarketSegmentGrp[0]->TradingSessionRulesGrpCount != 1)
        throw;
    if(!StringIdComparer::Equal(
            sec->MarketSegmentGrp[0]->TradingSessionRulesGrp[0]->TradingSessionID,
            4,
            "TQBR",
            4)) throw;

    message = new unsigned char[138] {
            0x8a, 0x30, 0x00, 0x00, 0xe0, 0x10, 0xc3, 0x61, 0x8a, 0x02,
            0x16, 0x48, 0x54, 0x42, 0x3c, 0x5c, 0xfb, 0x00, 0x65, 0xa7,
            0x4d, 0x4f, 0x45, 0x58, 0x52, 0x45, 0x50, 0x4f, 0x31, 0xd7,
            0x80, 0x80, 0x88, 0x87, 0x4d, 0x52, 0x49, 0x58, 0x58, 0x58,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x96,
            0x4d, 0x4f, 0x45, 0x58, 0x52, 0x45, 0x50, 0x4f, 0x31, 0x57,
            0x20, 0x42, 0x6f, 0x6e, 0x64, 0x20, 0x31, 0x32, 0x3a, 0x33,
            0x30, 0x98, 0x4d, 0x4f, 0x45, 0x58, 0x52, 0x45, 0x50, 0x4f,
            0x31, 0x57, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0x20,
            0x31, 0x32, 0x3a, 0x33, 0x30, 0x80, 0x82, 0x9b, 0x82, 0x32,
            0x80, 0x82, 0x80, 0x82, 0x54, 0x51, 0x42, 0xd2, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x89, 0x4d, 0x58, 0x52, 0x45, 0x50,
            0x4f, 0x31, 0x57, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80
    };

    manager->SetNewBuffer(message, 138);
    msgSeqNo = manager->ReadMsgSeqNumber();
    sec = (AstsSecurityDefinitionInfo*)manager->DecodeAsts();
    manager->PrintAstsSecurityDefinition(sec);

    message = new unsigned char[194] {
            0x93, 0x30, 0x00, 0x00, 0xe0, 0x10, 0xc3, 0x61, 0x93, 0x02,
            0x16, 0x48, 0x54, 0x42, 0x41, 0x06, 0x87, 0x00, 0x65, 0xa7,
            0x4d, 0x52, 0x4b, 0xc3, 0x8d, 0x52, 0x55, 0x30, 0x30, 0x30,
            0x41, 0x30, 0x4a, 0x50, 0x50, 0x4c, 0x38, 0x82, 0x34, 0x86,
            0x87, 0x45, 0x53, 0x58, 0x58, 0x58, 0x58, 0x83, 0x43, 0x53,
            0x80, 0x09, 0x4e, 0x45, 0xcc, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x8c, 0x4d, 0x52, 0x53, 0x4b, 0x20, 0x43, 0x65, 0x6e,
            0x74, 0x72, 0x61, 0xa4, 0x27, 0xd0, 0x9c, 0xd0, 0xa0, 0xd0,
            0xa1, 0xd0, 0x9a, 0x20, 0xd0, 0xa6, 0xd0, 0xb5, 0xd0, 0xbd,
            0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0x27, 0x20, 0xd0, 0x9f,
            0xd0, 0x90, 0xd0, 0x9e, 0x20, 0xd0, 0xb0, 0xd0, 0xbe, 0x80,
            0x83, 0x9b, 0x82, 0x34, 0x88, 0x82, 0x30, 0x52, 0x55, 0xc2,
            0x82, 0x84, 0x81, 0x82, 0x54, 0x51, 0x42, 0xd2, 0xce, 0x92,
            0x82, 0x52, 0x55, 0xc2, 0x83, 0x31, 0x2d, 0x30, 0x31, 0x2d,
            0x31, 0x30, 0x32, 0x31, 0x34, 0x2d, 0xc1, 0x94, 0xd0, 0x9c,
            0xd0, 0xa0, 0xd0, 0xa1, 0xd0, 0x9a, 0x20, 0xd0, 0xa6, 0xd0,
            0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0x85, 0x46, 0x4e,
            0x44, 0x54, 0xfc, 0x85, 0x80, 0x80, 0x80, 0x80, 0xff, 0x81,
            0x80, 0x80, 0x80, 0x80, 0x81, 0x01, 0x1d, 0x23, 0x0a, 0x53,
            0xdc, 0x80, 0x80, 0x80
    };

    manager->SetNewBuffer(message, 194);
    msgSeqNo = manager->ReadMsgSeqNumber();
    sec = (AstsSecurityDefinitionInfo*)manager->DecodeAsts();
    manager->PrintAstsSecurityDefinition(sec);
    
    message = new unsigned char[182] {
            0x4f, 0x9f, 0x03, 0x00, 0xc0, 0x13, 0xdb, 0x0e, 0x3e, 0xcf,
            0x02, 0x15, 0x55, 0x15, 0x12, 0x1c, 0x55, 0x88, 0x83, 0x83,
            0xb1, 0x80, 0x52, 0x55, 0x30, 0x30, 0x30, 0x41, 0x30, 0x4a,
            0x56, 0x56, 0x4c, 0xb4, 0x15, 0x80, 0xfe, 0x00, 0x5b, 0xc5,
            0x81, 0x20, 0xf8, 0x80, 0x80, 0x80, 0xc3, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x45, 0x51, 0x44,
            0xc2, 0x80, 0x82, 0xf7, 0x80, 0x52, 0x55, 0x30, 0x30, 0x30,
            0x41, 0x30, 0x4a, 0x56, 0x56, 0x4c, 0xb4, 0x15, 0x81, 0x80,
            0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x45, 0x51, 0x44, 0xc2,
            0x80, 0x83, 0xea, 0x80, 0x52, 0x55, 0x30, 0x30, 0x30, 0x41,
            0x30, 0x4a, 0x56, 0x56, 0x4c, 0xb4, 0x15, 0x82, 0xfe, 0x00,
            0x5b, 0xc5, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x45, 0x51, 0x44,
            0xc2, 0xce
    };

    manager->SetNewBuffer(message, 225);
    msgSeqNo = manager->ReadMsgSeqNumber();
    AstsIncrementalMSRFONDInfo *msr = (AstsIncrementalMSRFONDInfo*)manager->DecodeAsts();
    manager->PrintAstsIncrementalMSRFOND(msr);

    if(msr->GroupMDEntries[0]->MDUpdateAction != MDUpdateAction::mduaDelete)
        throw;
    if(msr->GroupMDEntries[0]->MDEntryType[0] != MDEntryType::mdetSellQuote)
        throw;
    if(msr->GroupMDEntries[0]->MDEntryID[0] != '\0')
        throw;
    if(!StringIdComparer::Equal(msr->GroupMDEntries[0]->Symbol, msr->GroupMDEntries[0]->SymbolLength, "RU000A0JVVL4", 12))
        throw;
    if(msr->GroupMDEntries[0]->RptSeq != 2687)
        throw;
    if(msr->GroupMDEntries[0]->QuoteCondition[0] != 'C')
        throw;
    if(msr->GroupMDEntries[0]->QuoteConditionLength != 1)
        throw;
    if(!StringIdComparer::Equal(msr->GroupMDEntries[0]->TradingSessionID, 4, "EQDB", 4))
        throw;

    message = new unsigned char[18] {
            0x4c, 0x9f, 0x03, 0x00, 0xc0, 0x10, 0xbc, 0x0e, 0x3e, 0xcc,
            0x02, 0x15, 0x55, 0x15, 0x10, 0x77, 0x61, 0x90
    };
    manager->SetNewBuffer(message, 18);
    msgSeqNo = manager->ReadMsgSeqNumber();
    AstsHeartbeatInfo *hb = (AstsHeartbeatInfo*)manager->DecodeAsts();
    manager->PrintAstsHeartbeat(hb);

    message = new unsigned char[225] {
            0x8d, 0x23, 0x00, 0x00, 0xe0, 0x10, 0xc3, 0x47, 0x8d, 0x23,
            0x68, 0x05, 0x17, 0x15, 0x66, 0x29, 0xad, 0x00, 0x5e, 0xed,
            0x52, 0x55, 0x30, 0x30, 0x30, 0x41, 0x30, 0x4a, 0x55, 0x36,
            0x4e, 0xb4, 0x8d, 0x52, 0x55, 0x30, 0x30, 0x30, 0x41, 0x30,
            0x4a, 0x55, 0x36, 0x4e, 0x34, 0x82, 0x34, 0x8c, 0x87, 0x44,
            0x42, 0x58, 0x58, 0x58, 0x58, 0x85, 0x4d, 0x55, 0x4e, 0x49,
            0x09, 0x4f, 0x5f, 0xc1, 0x09, 0x4e, 0x42, 0xb8, 0x80, 0x87,
            0x83, 0x09, 0x4e, 0x43, 0x95, 0xf0, 0x31, 0x4d, 0x76, 0x4e,
            0x13, 0x51, 0xba, 0x80, 0x80, 0x92, 0x4b, 0x6f, 0x73, 0x74,
            0x72, 0x6f, 0x6d, 0x61, 0x20, 0x72, 0x65, 0x67, 0x2e, 0x2d,
            0x30, 0x30, 0x37, 0xaa, 0xd0, 0x9a, 0xd0, 0xbe, 0xd1, 0x81,
            0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x81,
            0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0,
            0xb1, 0xd0, 0xbb, 0x2e, 0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0,
            0xbf, 0x2e, 0x30, 0x30, 0x37, 0x80, 0x83, 0x9b, 0x82, 0x34,
            0x88, 0x83, 0x39, 0x31, 0x52, 0x55, 0xc2, 0x82, 0x81, 0x81,
            0x82, 0x52, 0x50, 0x4d, 0xcf, 0x4e, 0xc1, 0x93, 0x82, 0x52,
            0x55, 0xc2, 0x82, 0x52, 0x55, 0x33, 0x34, 0x30, 0x30, 0x37,
            0x4b, 0x4f, 0x53, 0xb0, 0x94, 0xd0, 0x9a, 0xd0, 0xbe, 0xd1,
            0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0,
            0x9e, 0xd0, 0xb1, 0x37, 0x84, 0x52, 0x50, 0x53, 0xfc, 0x81,
            0x80, 0x80, 0x80, 0x80, 0x82, 0xb7, 0x80, 0x80, 0x80, 0x80,
            0x87, 0x84, 0x80, 0x80, 0x80
    };

    manager->SetNewBuffer(message, 225);
    msgSeqNo = manager->ReadMsgSeqNumber();
    AstsSecurityDefinitionInfo *sd = (AstsSecurityDefinitionInfo*)manager->DecodeAsts();
    manager->PrintAstsSecurityDefinition(sd);
    if(manager->MessageLength() != 225)
        throw;
    if(!CompareStrings(sd->StateSecurityID, "RU34007KOS0"))
        throw;
    if(sd->SettlDate != 20160823)
        throw;

    if(sd->FaceValue.Mantissa != 55 || sd->FaceValue.Exponent != 1)
        throw;
    if(sd->NoSharesIssued.Mantissa != 4 || sd->NoSharesIssued.Exponent != 6)
        throw;
    manager->PrintAstsSecurityDefinition(sd);

    message = new unsigned char[171] {
            0x46, 0x20, 0x00, 0x00, 0xe0, 0x10, 0xc3, 0x40, 0xc6, 0x23,
            0x68, 0x05, 0x17, 0x03, 0x01, 0x50, 0xd9, 0x00, 0x5e, 0xed,
            0x58, 0x53, 0x30, 0x39, 0x33, 0x35, 0x33, 0x31, 0x31, 0x32,
            0x34, 0xb0, 0x8d, 0x58, 0x53, 0x30, 0x39, 0x33, 0x35, 0x33,
            0x31, 0x31, 0x32, 0x34, 0x30, 0x82, 0x34, 0x84, 0x87, 0x44,
            0x42, 0x58, 0x58, 0x58, 0x58, 0x85, 0x43, 0x4f, 0x52, 0x50,
            0x09, 0x52, 0x62, 0xfc, 0x09, 0x4e, 0x42, 0xb8, 0x80, 0x80,
            0x09, 0x4e, 0x44, 0xe4, 0xfb, 0x14, 0xc1, 0x80, 0x80, 0x86,
            0x53, 0x42, 0x2d, 0x32, 0x33, 0x9e, 0x53, 0x42, 0x20, 0x43,
            0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x20, 0x53, 0x2e, 0x41,
            0x2e, 0x20, 0x35, 0x2e, 0x32, 0x35, 0x20, 0x32, 0x33, 0x2f,
            0x30, 0x35, 0x2f, 0x32, 0x33, 0x80, 0x83, 0x9b, 0x82, 0x36,
            0x88, 0x84, 0x31, 0x38, 0x34, 0x55, 0x53, 0xc4, 0x82, 0x81,
            0x81, 0x82, 0x52, 0x50, 0x45, 0xd5, 0xce, 0x92, 0x80, 0x55,
            0x53, 0xc4, 0x82, 0x80, 0x86, 0x53, 0x42, 0x2d, 0x32, 0x33,
            0x84, 0x52, 0x50, 0x53, 0xfa, 0x81, 0x80, 0x80, 0x80, 0x80,
            0x84, 0x81, 0x80, 0x80, 0x80, 0x80, 0x87, 0x81, 0x80, 0x80,
            0x80};


    manager->SetNewBuffer(message, 171);
    msgSeqNo = manager->ReadMsgSeqNumber();
    sd = (AstsSecurityDefinitionInfo*)manager->DecodeAsts();
    manager->PrintAstsSecurityDefinition(sd);
    if(manager->MessageLength() != 171)
        throw;

    message = new unsigned char[241] {
            0x7c, 0x2e, 0x00, 0x00, 0xe0, 0x12, 0xec, 0x5c, 0xfc, 0x23,
            0x68, 0x07, 0x6d, 0x66, 0x66, 0x4a, 0xe3, 0x11, 0x32, 0x86,
            0x03, 0x9c, 0x00, 0xe5, 0x54, 0x51, 0x49, 0xc6, 0x52, 0x55,
            0x30, 0x30, 0x30, 0x41, 0x30, 0x4a, 0x54, 0x38, 0x55, 0xb8,
            0x82, 0x82, 0x92, 0x80, 0x87, 0xb0, 0x42, 0x30, 0x30, 0x30,
            0x30, 0x31, 0x31, 0x30, 0x36, 0xb6, 0xff, 0x00, 0x56, 0xba,
            0x81, 0x00, 0xc5, 0x49, 0x3a, 0x3b, 0xd1, 0x04, 0x07, 0x97,
            0x80, 0x80, 0x80, 0x80, 0xb0, 0x42, 0x30, 0x30, 0x30, 0x30,
            0x31, 0x31, 0x30, 0x36, 0xb7, 0xff, 0x00, 0x56, 0xbb, 0x81,
            0xa6, 0x49, 0x51, 0x15, 0xf1, 0x1e, 0x34, 0x8f, 0x80, 0x80,
            0x80, 0x80, 0xb0, 0x42, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31,
            0x30, 0x36, 0xb8, 0xff, 0x00, 0x56, 0xbc, 0x81, 0xb5, 0x48,
            0x1a, 0x46, 0xf1, 0x31, 0x57, 0xeb, 0x80, 0x80, 0x80, 0x80,
            0xb0, 0x42, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x30, 0x36,
            0xb9, 0xff, 0x00, 0x56, 0xbd, 0x81, 0x83, 0x48, 0x76, 0x7b,
            0x81, 0x1b, 0x55, 0xb5, 0x80, 0x80, 0x80, 0x80, 0xb1, 0x53,
            0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x30, 0x37, 0xb0, 0x81,
            0x08, 0xd3, 0x81, 0x9d, 0x49, 0x4d, 0x0a, 0xb9, 0x12, 0x7d,
            0xb6, 0x80, 0x80, 0x80, 0x80, 0xb1, 0x53, 0x30, 0x30, 0x30,
            0x30, 0x31, 0x31, 0x30, 0x37, 0xb1, 0xff, 0x00, 0x56, 0xbf,
            0x81, 0xac, 0x49, 0x40, 0x77, 0xe1, 0x1c, 0x51, 0x8a, 0x80,
            0x80, 0x80, 0x80, 0xb1, 0x53, 0x30, 0x30, 0x30, 0x30, 0x31,
            0x31, 0x30, 0x37, 0xb2, 0xff, 0x00, 0x56, 0xc0, 0x81, 0x97,
            0x49, 0x3e, 0x4e, 0xf1, 0x0d, 0x76, 0xf8, 0x80, 0x80, 0x80,
            0x80 };

    manager->SetNewBuffer(message, 241);
    msgSeqNo = manager->ReadMsgSeqNumber();
    AstsSnapshotInfo *snap = (AstsSnapshotInfo*)manager->GetAstsSnapshotInfo();
    if(snap->LastMsgSeqNumProcessed != 284933)
        throw;

    message = new unsigned char[18] {
            0x00, 0x8d, 0x03, 0x00, 0xc0, 0x10, 0xbc, 0x0e, 0x1a, 0x80,
            0x23, 0x68, 0x08, 0x12, 0x7f, 0x4c, 0x4f, 0xfa
    };
    manager->SetNewBuffer(message, 18);
    msgSeqNo = manager->ReadMsgSeqNumber();
    manager->DecodeAsts();
    manager->PrintAsts();

    message = new unsigned char[65] {
            0x05, 0x8d, 0x03, 0x00, 0xe0, 0x12, 0xf6, 0x0e, 0x1a, 0x85,
            0x23, 0x68, 0x08, 0x12, 0x7f, 0x4c, 0x66, 0xd1, 0x81, 0x83,
            0xb0, 0x42, 0x30, 0x30, 0x30, 0x30, 0x32, 0x37, 0x35, 0x37,
            0xb1, 0x52, 0x55, 0x30, 0x30, 0x30, 0x41, 0x30, 0x4a, 0x50,
            0x4b, 0x4a, 0xb3, 0x03, 0xb2, 0xff, 0x01, 0x57, 0xb3, 0x80,
            0x57, 0x6d, 0x1e, 0xd1, 0x1e, 0x28, 0xeb, 0x80, 0x80, 0x80,
            0x54, 0x51, 0x49, 0xc6, 0x80
    };
    manager->SetNewBuffer(message, 65);
    msgSeqNo = manager->ReadMsgSeqNumber();
    manager->DecodeAsts();
    manager->PrintAsts();
    
    message = new unsigned char[55] {
            0x25, 0x29, 0x04, 0x00, 0xe0, 0x12, 0xf4, 0x10, 0x52, 0xa5,
            0x23, 0x68, 0x0b, 0x0f, 0x04, 0x7e, 0x58, 0xa2, 0x81, 0x80,
            0x83, 0xb1, 0x33, 0x35, 0x35, 0x31, 0x34, 0xb8, 0x42, 0x47,
            0x44, 0xc5, 0x26, 0xee, 0x80, 0x5f, 0x6d, 0x15, 0x91, 0x34,
            0x1d, 0xf4, 0xfe, 0x05, 0xc5, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x54, 0x51, 0x44, 0xc5, 0xce
    };

    manager->SetNewBuffer(message, 55);
    msgSeqNo = manager->ReadMsgSeqNumber();
    manager->DecodeAsts();
    manager->PrintAsts();

    if(manager->TemplateId() != 2420)
        throw;

    AstsIncrementalOLRFONDInfo *olrfondInfo = (AstsIncrementalOLRFONDInfo*)manager->LastDecodeInfo();
    if(olrfondInfo->GroupMDEntriesCount != 1)
        throw;
    if(manager->MessageLength() != 55)
        throw;

    message = new unsigned char[57] {
            0x64, 0x0c, 0x04, 0x00, 0xe0, 0x12, 0xf4, 0x10, 0x18, 0xe4,
            0x23, 0x68, 0x0b, 0x12, 0x63, 0x2e, 0x2d, 0xc4, 0x81, 0x80,
            0x81, 0xb1, 0x33, 0x36, 0x30, 0x38, 0x36, 0xb0, 0x55, 0x54,
            0x53, 0xd9, 0x1d, 0xef, 0x80, 0x61, 0x31, 0x59, 0xb1, 0x1d,
            0x01, 0x9e, 0xfe, 0x03, 0xbc, 0x81, 0x0d, 0x9d, 0x80, 0xcf,
            0x80, 0x80, 0x54, 0x51, 0x44, 0xc5, 0xce
    };

    manager->SetNewBuffer(message, 57);
    msgSeqNo = manager->ReadMsgSeqNumber();
    manager->DecodeAsts();
    manager->PrintAsts();

    olrfondInfo = (AstsIncrementalOLRFONDInfo*)manager->LastDecodeInfo();
    if(olrfondInfo->GroupMDEntriesCount != 1)
        throw;
    if(manager->MessageLength() != 57)
        throw;

    message = new unsigned char[18] {
            0x32, 0x77, 0x03, 0x00, 0xe0, 0x12, 0xf4, 0x0d, 0x6e, 0xb2,
            0x23, 0x68, 0x0d, 0x26, 0x2f, 0x55, 0x09, 0x83
    };

    manager->SetNewBuffer(message, 18);
    manager->SetNewBuffer(message, 18);
    msgSeqNo = manager->ReadMsgSeqNumber();
    manager->DecodeAsts();
    manager->PrintAsts();
}

bool FastProtocolTester::CompareStrings(char* str1, const char *str2) {
    int length = strlen(str2);
    for(int i = 0; i < length; i++) {
        if(str1[i] != str2[i])
            return false;
    }
    return true;
}

void FastProtocolTester::TestMessageSequenceNumber() { 

    *((int*)(manager->Buffer())) = 0x12345678;
    int seq = manager->ReadMsgSeqNumber();

    if (manager->CurrentPos() - manager->Buffer() != 4) { 
        printf("ReadMsgSeqNumber: expected 4 but was %ld", manager->CurrentPos() - manager->Buffer());
        throw;
    }
    if (seq != 0x12345678) { 
        printf("ReadMsgSeqNumber: expected 0x12345678 but was %x", seq);
        throw;
    }
}

void FastProtocolTester::TestReadInt32_Mandatory() {
    printf("Test FastProtocolTester::TestReadInt32_Mandatory\n");
    manager->SetNewBuffer(new unsigned char[128], 128);

    BYTE buffer[12];
    for (int i = 1; i < 5; i++) { // extended positive
        memset(buffer, 0, 12);
        for (int j = 1; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[1] &= 0x0f;
        buffer[1] |= 0x40;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT32 value = manager->ReadInt32_Mandatory();
        if(manager->MessageLength() != i + 1)
            throw;
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT32 value2 = manager->ReadInt32_Mandatory();
        if (value2 != value)
            throw;
    }

    for (int i = 0; i < 5; i++) { // positive
        memset(buffer, 0, 7);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[0] &= 0x03;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT32 value = manager->ReadInt32_Mandatory();
        if(manager->MessageLength() != i + 1)
            throw;
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT32 value2 = manager->ReadInt32_Mandatory();
        if (value2 != value)
            throw;
    }

    for (int i = 1; i < 5; i++) { // extended negative
        memset(buffer, 0, 6);
        buffer[0] = 0x7f;
        for (int j = 1; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[1] &= 0x03;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT32 value = manager->ReadInt32_Mandatory();
        if(manager->MessageLength() != i + 1)
            throw;
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt32_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT32 value2 = manager->ReadInt32_Mandatory();
        if (value2 != value)
            throw;
    }

    for (int i = 0; i < 4; i++) { // simple negative
        memset(buffer, 0, 5);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[0] |= 0x40;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT32 value = manager->ReadInt32_Mandatory();
        if(manager->MessageLength() != i + 1)
            throw;
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt32_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT32 value2 = manager->ReadInt32_Mandatory();
        if (value2 != value)
            throw;
    }

    INT32 value = 0x7fffffff;
    manager->ResetBuffer();
    manager->WriteInt32_Mandatory(value);
    manager->ResetBuffer();
    INT32 value2 = manager->ReadInt32_Mandatory();
    if (value != value2)
        throw;
}

void FastProtocolTester::TestReadInt32_Optional() {
    printf("Test FastProtocolTester::TestReadInt32_Optional\n");
    manager->SetNewBuffer(new unsigned char[100], 100);

    INT32 value;
    for (int i = 0; i > INT32_MIN + 60; i -= 50) {
        manager->ResetBuffer();
        manager->WriteInt32_Optional(i);
        manager->ResetBuffer();
        value = manager->ReadInt32_Optional();
        if (value != i)
            throw;
    }

    for (int i = 0; i < INT32_MAX - 60; i += 50) {
        manager->ResetBuffer();
        manager->WriteInt32_Optional(i);
        manager->ResetBuffer();
        value = manager->ReadInt32_Optional();
        if (value != i)
            throw;
    }
}

void FastProtocolTester::TestReadInt32_Optional2() {
    printf("Test FastProtocolTester::TestReadInt32_Optional2\n");
    manager->SetNewBuffer(new unsigned char[100], 100);

    INT32 value;
    manager->Buffer()[0] = 0x80;
    manager->ResetBuffer();
    if(manager->ReadInt32_Optional(&value))
        throw;

    for (int i = -1; i > INT32_MIN + 60; i -= 50) {
        manager->ResetBuffer();
        manager->WriteInt32_Optional(i);
        manager->ResetBuffer();
        bool res = manager->ReadInt32_Optional(&value);
        if (value != i || !res) {
            manager->ResetBuffer();
            res = manager->ReadInt32_Optional(&value);
            throw;
        }
    }

    for (int i = 0; i < INT32_MAX - 60; i += 50) {
        manager->ResetBuffer();
        manager->WriteInt32_Optional(i);
        manager->ResetBuffer();
        bool res = manager->ReadInt32_Optional(&value);
        if (value != i || !res)
            throw;
    }
}

void FastProtocolTester::TestReadUInt32_Optional_Fixed1() {
    printf("Test FastProtocolTester::TestReadUInt32_Optional_Fixed1\n");
    UINT32 value;

    for (UINT32 i = 0; i < 0x7f; i ++) {
        manager->ResetBuffer();
        manager->WriteUInt32_Optional(i);
        manager->ResetBuffer();
        bool res = manager->ReadUInt32_Optional_Fixed1(&value);
        if (value != i || !res)
            throw;
    }
}

void FastProtocolTester::TestReadUInt32_Optional2() {
    printf("Test FastProtocolTester::TestReadUInt32_Optional2\n");
    UINT32 value;

    manager->SetNewBuffer(new unsigned char[100], 100);
    manager->ResetBuffer();
    manager->Buffer()[0] = 0x80;
    if(manager->ReadUInt32_Optional(&value))
        throw;

    for (UINT32 i = 0; i < UINT32_MAX - 60; i += 50) {
        manager->ResetBuffer();
        manager->WriteUInt32_Optional(i);
        manager->ResetBuffer();
        bool res = manager->ReadUInt32_Optional(&value);
        if (value != i || !res)
            throw;
        manager->ResetBuffer();
        res = manager->ReadUInt32_Optional_Predict1(&value);
        if (value != i || !res)
            throw;
    }
}

void FastProtocolTester::TestReadUInt32_Mandatory() {
    printf("Test FastProtocolTester::TestReadUInt32_Mandatory\n");

    unsigned char buffer[8];
    manager->SetNewBuffer(new unsigned char[100], 100);
    for (int i = 0; i < 5; i++) { // positive
        memset(buffer, 0, 5);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (rand() % 0xff) & 0x7f;
            if (j == 0) {
                buffer[j] &= 0x0f;
                buffer[j] |= 0x01;
            }
        }
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        UINT64 value = manager->ReadUInt32_Mandatory();
        manager->ResetBuffer();
        UINT64 value3 = manager->ReadUInt32_Mandatory_Predict1();
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteUInt32_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        UINT64 value2 = manager->ReadUInt32_Mandatory();
        manager->ResetBuffer();
        UINT64 value4 = manager->ReadUInt32_Mandatory();
        manager->ResetBuffer();
        if (value2 != value || value3 != value4)
            throw;
    }

    for (int i = 0; i < 2; i++) { // positive
        memset(buffer, 0, 5);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (rand() % 0xff) & 0x7f;
            if (j == 0) {
                buffer[j] &= 0x0f;
                buffer[j] |= 0x01;
            }
        }
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        UINT64 value = manager->ReadUInt32_Mandatory_Predict12();
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteUInt32_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        UINT64 value2 = manager->ReadUInt32_Mandatory_Predict12();
        manager->ResetBuffer();

        if (value2 != value)
            throw;
    }

    UINT64 value = 0xffffffff;
    manager->ResetBuffer();
    manager->WriteUInt32_Mandatory(value);
    manager->ResetBuffer();
    UINT64 value2 = manager->ReadUInt32_Mandatory();
    if (value != value2)
        throw;
    manager->ResetBuffer();
    UINT64 value3 = manager->ReadUInt32_Mandatory_Predict1();
    if (value != value3)
        throw;
}

void FastProtocolTester::TestReadUInt32_Optional() {
    printf("Test FastProtocolTester::TestReadUInt32_Optional\n");

    unsigned char buffer[8];
    manager->SetNewBuffer(new unsigned char[100], 100);
    for (int i = 0; i < 5; i++) { // positive
        memset(buffer, 0, 5);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (rand() % 0xff) & 0x7f;
            if (j == 0) {
                buffer[j] &= 0x0f;
                buffer[j] |= 0x01;
            }
        }
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        UINT32 value = manager->ReadUInt32_Optional();
        manager->ResetBuffer();
        UINT32 value3 = 0;
        manager->ReadUInt32_Optional(&value3);
        manager->ResetBuffer();
        UINT32 value5 = manager->ReadUInt32_Optional_Predict1();
        manager->ResetBuffer();
        UINT32 value6 = 0;
        manager->ReadUInt32_Optional_Predict1(&value6);
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteUInt32_Optional(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        UINT32 value2 = manager->ReadUInt32_Optional();
        manager->ResetBuffer();
        UINT32 value4 = 0;
        manager->ReadUInt32_Optional(&value4);
        manager->ResetBuffer();
        if (value2 != value || value3 != value4 || value5 != value || value6 != value)
            throw;
    }

    manager->Buffer()[0] = 0x82;
    manager->ResetBuffer();
    UINT32 value5 = manager->ReadUInt32_Optional_Fixed1();
    if(value5 != 0x01)
        throw;
    manager->ResetBuffer();
    UINT32 value6 = 0;
    manager->ReadUInt32_Optional_Fixed1(&value6);
    if(value6 != 0x01)
        throw;
    manager->ResetBuffer();
    UINT32 value7 = 0;
    manager->ReadUInt32_Optional_Predict12(&value7);
    if(value7 != 0x01)
        throw;

    UINT32 value = 0xffffffff;
    manager->ResetBuffer();
    manager->WriteUInt32_Mandatory(value);
    manager->ResetBuffer();
    UINT32 value2 = manager->ReadUInt32_Optional();
    if ((value - 1) != value2)
        throw;
    manager->ResetBuffer();
    UINT32 value3 = 0;
    manager->ReadUInt32_Optional(&value3);
    if ((value - 1) != value3)
        throw;

    manager->ResetBuffer();
    manager->Buffer()[0] = 0x22;
    manager->Buffer()[1] = 0x81;
    value3 = manager->ReadUInt32_Optional();
    manager->ResetBuffer();
    value6 = 0;
    manager->ReadUInt32_Optional_Predict12(&value6);
    if(value3 != value6)
        throw;
}

void FastProtocolTester::TestReadUInt32_Mandatory_Predict1() {
    printf("Test FastProtocolTester::TestReadUInt32_Mandatory_Predict1\n");
    manager->SetNewBuffer(new unsigned char[100], 100);

    for (UINT32 i = 0; i < UINT32_MAX - 60; i += 50) {
        manager->ResetBuffer();
        manager->WriteUInt32_Mandatory(i);
        manager->ResetBuffer();
        UINT32 value = manager->ReadUInt32_Mandatory();
        if (value != i) {
            manager->ResetBuffer();
            value = manager->ReadUInt32_Mandatory_Predict1();
            throw;
        }
    }
}

void FastProtocolTester::TestStringCopy() {
    printf("Test FastProtocolTester::TestStringCopy\n");
    manager->SetNewBuffer(new unsigned char[100], 100);

    char *buffer = new char[60];
    char *buffer2 = new char[60];
    for (int i = 0; i < 60; i++) {
        buffer[i] = (char)('A' + i);
    }

    for (int i = 1; i < 60; i++) {
        memset(buffer2, 60, 0);
        manager->CopyString(buffer2, buffer, i);
        for(int j = 0; j < i; j++) {
            if(buffer[j] != buffer2[j])
                throw;
        }
        memset(buffer2, 60, 0);

        StringIdComparer::CopyString(buffer2, buffer, i);
        for(int j = 0; j < i; j++) {
            if(buffer[j] != buffer2[j])
                throw;
        }
    }
}

void FastProtocolTester::TestReadString_Optional() { 
    printf("Test FastProtocolTester::TestReadString_Optional\n");

    manager->SetNewBuffer(new unsigned char[128], 128);
    manager->WriteString_Optional((const char*)NULL, 0);
    if (manager->MessageLength() != 1)
        throw;
    if (manager->Buffer()[0] != 0x80)
        throw;

    manager->ResetBuffer();
    manager->WriteString_Optional((char*)"", 0);
    if (manager->MessageLength() != 2)
        throw;
    if (manager->Buffer()[0] != 0x00)
        throw;
    if (manager->Buffer()[1] != 0x80)
        throw;

    char *buffer = new char[60];
    char *buffer2 = new char[60];
    for (int i = 0; i < 60; i++) { 
        buffer[i] = (char)('A' + i);
    } 

    int length = 0;
    for (int i = 1; i < 60; i++) { 
        manager->ResetBuffer();
        manager->WriteString_Optional(buffer, i);
        if (manager->MessageLength() != i)
            throw;

        manager->ResetBuffer();
        manager->ReadString_Optional(buffer2, &length);
        if (length != i)
            throw;
        for (int j = 0; j < i; j++) { 
            if (buffer2[j] != buffer[j])
                throw;
        }
    }
}

void FastProtocolTester::TestReadString_Mandatory() {
    printf("Test FastProtocolTester::TestReadString_Mandatory\n");

    manager->SetNewBuffer(new unsigned char[128], 128);
    manager->WriteString_Mandatory((char*)"", 0);
    if (manager->MessageLength() != 1)
        throw;
    if (manager->Buffer()[0] != 0x80)
        throw;

    char *buffer = new char[60];
    char *buffer2 = new char[60];
    for (int i = 0; i < 60; i++) {
        buffer[i] = (char)('A' + i);
    }

    int length = 0;
    for (int i = 1; i < 60; i++) {
        manager->ResetBuffer();
        manager->WriteString_Mandatory(buffer, i);
        if (manager->MessageLength() != i)
            throw;

        manager->ResetBuffer();
        manager->ReadString_Mandatory(buffer2, &length);
        if (length != i)
            throw;
        for (int j = 0; j < i; j++) {
            if (buffer2[j] != buffer[j])
                throw;
        }
    }
}

void FastProtocolTester::TestReadByteVector_Optional() { 
    printf("Test FastProtocolTester::TestReadByteVector_Optional\n");

    manager->SetNewBuffer(new unsigned char[1000], 1000);
    manager->ResetBuffer();
    manager->WriteByteVector_Optional(NULL, 0);
    if (manager->MessageLength() != 1)
        throw;
    if (manager->Buffer()[0] != 0x80)
        throw;

    BYTE *buffer = new BYTE[1000];
    BYTE *buffer2 = new BYTE[1000];
    for (int i = 0; i < 1000; i++) {
        buffer[i] = (char)('A' + i % 60);
    }

    int length = 0;
    for (int i = 0; i < 1000; i++) {
        manager->ResetBuffer();
        manager->WriteByteVector_Optional(buffer, i);
        
        manager->ResetBuffer();
        manager->ReadByteVector_Optional(buffer2, &length, 1000);
        if (length != i)
            throw;
        for (int j = 0; j < i; j++) {
            if (buffer2[j] != buffer[j])
                throw;
        }
    }
}

void FastProtocolTester::TestReadByteVector_Mandatory() {
    printf("Test FastProtocolTester::TestReadByteVector_Mandatory\n");

    manager->SetNewBuffer(new unsigned char[1000], 1000);

    BYTE *buffer = new BYTE[1000];
    BYTE *buffer2 = new BYTE[1000];
    for (int i = 0; i < 1000; i++) {
        buffer[i] = (char)('A' + i % 60);
    }

    int length = 0;
    for (int i = 0; i < 900; i++) {
        manager->ResetBuffer();
        manager->WriteByteVector_Mandatory(buffer, i);

        manager->ResetBuffer();
        manager->ReadByteVector_Mandatory(buffer2, &length, 900);
        if (length != i)
            throw;
        for (int j = 0; j < i; j++) {
            if (buffer2[j] != buffer[j])
                throw;
        }
    }
}

void FastProtocolTester::TestReadDecimal_Optional() { 
    printf("Test FastProtocolTester::TestReadDecimal_Optional\n");

    Decimal value(942755, 2);
    manager->WriteDecimal_Optional(&value);

    if (manager->MessageLength() != 4)
        throw;
    if (!manager->CheckBuffer(new BYTE[4] { 0x83, 0x39, 0x45, 0xa3 }, 4))
        throw;

    value.Set(-942755, -2);
    manager->ResetBuffer();
    manager->WriteDecimal_Optional(&value);

    if (manager->MessageLength() != 4)
        throw;
    if (!manager->CheckBuffer(new BYTE[4] { 0xfe, 0x46, 0x3a, 0xdd }, 4))
        throw;
    
    value.Set(-8193, -3);
    manager->ResetBuffer();
    manager->WriteDecimal_Optional(&value);

    if (manager->MessageLength() != 4)
        throw;
    if (!manager->CheckBuffer(new BYTE[4] { 0xfd, 0x7f, 0x3f, 0xff }, 4))
        throw;
}

void FastProtocolTester::TestReadDecimal_Mandatory() {
    printf("Test FastProtocolTester::TestReadDecimal_Mandatory\n");

    Decimal value = { 942755, 2 };
    manager->WriteDecimal_Mandatory(&value);

    if (manager->MessageLength() != 4)
        throw;
    if (!manager->CheckBuffer(new BYTE[4] { 0x82, 0x39, 0x45, 0xa3 }, 4))
        throw;

    value = { 9427550, 1 };
    manager->ResetBuffer();
    manager->WriteDecimal_Mandatory(&value);

    if (manager->MessageLength() != 5)
        throw;
    if (!manager->CheckBuffer(new BYTE[5] { 0x81, 0x04, 0x3f, 0x34, 0xde }, 5))
        throw;

    value = { 942755, -2 };
    manager->ResetBuffer();
    manager->WriteDecimal_Mandatory(&value);

    if (manager->MessageLength() != 4)
        throw;
    if (!manager->CheckBuffer(new BYTE[4] { 0xfe, 0x39, 0x45, 0xa3 }, 4))
        throw;
}

void FastProtocolTester::TestReadInt64_Optional() {
    printf("Test FastProtocolTester::TestReadInt64_Optional\n");

    BYTE buffer[12];
    for (int i = 1; i < 10; i++) { // extended positive
        memset(buffer, 0, 12);
        for (int j = 1; j <= i; j++) { 
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[1] |= 0x40;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);
        
        manager->ResetBuffer();
        INT64 value = manager->ReadInt64_Optional();
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Optional(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT64 value2 = manager->ReadInt64_Optional();
        if (value2 != value)
            throw;
    }

    for (int i = 0; i < 9; i++) { // positive
        memset(buffer, 0, 12);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[0] &= 0xbf;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT64 value = manager->ReadInt64_Optional();
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Optional(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT64 value2 = manager->ReadInt64_Optional();
        if (value2 != value)
            throw;
    }

    for (int i = 1; i < 10; i++) { // extended negative
        memset(buffer, 0, 12);
        buffer[0] = 0x7f;
        for (int j = 1; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[1] &= 0xbf;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT64 value = manager->ReadInt64_Optional();
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Optional(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT64 value2 = manager->ReadInt64_Optional();
        if (value2 != value)
            throw;
    }

    for (int i = 0; i < 9; i++) { // simple negative
        memset(buffer, 0, 12);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[0] |= 0x40;
        buffer[0] &= 0xfe;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT64 value = manager->ReadInt64_Optional();
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Optional(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT64 value2 = manager->ReadInt64_Optional();
        if (value2 != value)
            throw;
    }
}

void FastProtocolTester::TestReadInt64_Mandatory() {
    printf("Test FastProtocolTester::TestReadInt64_Mandatory\n");
    manager->SetNewBuffer(new unsigned char[128], 128);

    BYTE buffer[12];
    for (int i = 1; i < 10; i++) { // extended positive
        memset(buffer, 0, 12);
        for (int j = 1; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[1] |= 0x40;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT64 value = manager->ReadInt64_Mandatory();
        if(manager->MessageLength() != i + 1)
            throw;
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT64 value2 = manager->ReadInt64_Mandatory();
        if (value2 != value)
            throw;
    }

    for (int i = 0; i < 9; i++) { // positive
        memset(buffer, 0, 12);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[0] &= 0xbf; // exclude 0x40
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT64 value = manager->ReadInt64_Mandatory();
        if(manager->MessageLength() != i + 1)
            throw;
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT64 value2 = manager->ReadInt64_Mandatory();
        if (value2 != value)
            throw;
    }

    for (int i = 1; i < 10; i++) { // extended negative
        memset(buffer, 0, 12);
        buffer[0] = 0x7f;
        for (int j = 1; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[1] &= 0xbf;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT64 value = manager->ReadInt64_Mandatory();
        if(manager->MessageLength() != i + 1)
            throw;
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT64 value2 = manager->ReadInt64_Mandatory();
        if (value2 != value)
            throw;
    }

    for (int i = 0; i < 9; i++) { // simple negative
        memset(buffer, 0, 12);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (unsigned char)(rand() & 0x7f);
        }
        buffer[0] |= 0x40;
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        INT64 value = manager->ReadInt64_Mandatory();
        if(manager->MessageLength() != i + 1)
            throw;
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteInt64_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        INT64 value2 = manager->ReadInt64_Mandatory();
        if (value2 != value)
            throw;
    }

    INT64 value = 0x7fffffffffffffff;
    manager->ResetBuffer();
    manager->WriteInt64_Mandatory(value);
    manager->ResetBuffer();
    INT64 value2 = manager->ReadInt64_Mandatory();
    if (value != value2)
        throw;
}

void FastProtocolTester::TestReadUInt64_Mandatory() {
    printf("Test FastProtocolTester::TestReadUInt64_Mandatory\n");

    BYTE buffer[12];

    //00 72 40 0d 6e 79 6c 21 ab
    buffer[0] = 0x01;
    buffer[1] = 0x72;
    buffer[2] = 0x0d;
    buffer[3] = 0x6e;
    buffer[4] = 0x79;
    buffer[5] = 0x6c;
    buffer[6] = 0x21;
    buffer[7] = 0xab;

    manager->ResetBuffer();
    manager->CopyToBuffer(buffer, 8);
    UINT64 v = manager->ReadUInt64_Mandatory();
    manager->ResetBuffer();
    manager->WriteUInt64_Mandatory(v);
    if (!manager->CheckBuffer(buffer, 8))
        throw;
    manager->ResetBuffer();
    UINT64 v2 = manager->ReadUInt64_Mandatory();
    if (v2 != v)
        throw;

    for (int i = 0; i < 9; i++) { // positive
        memset(buffer, 0, 12);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (rand() % 0xff) & 0x7f;
            if (j == 0) {
                buffer[j] &= 0xbf;
                buffer[j] |= 0x01;
            }
        }
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        UINT64 value = manager->ReadUInt64_Mandatory();
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteUInt64_Mandatory(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        UINT64 value2 = manager->ReadUInt64_Mandatory();
        if (value2 != value)
            throw;
    }

    UINT64 value = 0xffffffffffffffff;
    manager->ResetBuffer();
    manager->WriteUInt64_Mandatory(value);
    manager->ResetBuffer();
    UINT64 value2 = manager->ReadUInt64_Mandatory();
    if (value != value2)
        throw;
}

void FastProtocolTester::TestReadUInt64_Optional() {
    printf("Test FastProtocolTester::TestReadUInt64_Optional\n");
    manager->SetNewBuffer(new unsigned char[12], 12);

    BYTE buffer[12];

    for (int i = 0; i < 9; i++) { // positive
        memset(buffer, 0, 12);
        for (int j = 0; j <= i; j++) {
            buffer[j] = (rand() % 0xff) & 0x7f;
            if (j == 0) {
                buffer[j] &= 0xbf;
                buffer[j] |= 0x01;
            }
        }
        buffer[i] |= 0x80;
        manager->CopyToBuffer(buffer, i + 1);

        manager->ResetBuffer();
        UINT64 value = manager->ReadUInt64_Optional();
        manager->ResetBuffer();

        manager->ClearBuffer();
        manager->WriteUInt64_Optional(value);

        if (!manager->CheckBuffer(buffer, i + 1))
            throw;

        manager->ResetBuffer();
        UINT64 value2 = manager->ReadUInt64_Optional();
        if (value2 != value)
            throw;
    }

    UINT64 value = 0xfffffffffffffffe;
    manager->ResetBuffer();
    manager->WriteUInt64_Optional(value);
    manager->ResetBuffer();
    UINT64 value2 = manager->ReadUInt64_Optional();
    if (value != value2)
        throw;
}

void FastProtocolTester::TestParsePresenceMap() {
    /*FastProtocolManager *manager = new FastProtocolManager(new AstsObjectsAllocationInfo(128,128));
    
    *(manager->Buffer()) = 0x80;
    manager->ParsePresenceMap();

    if (manager->CurrentPos() - manager->Buffer() != 1) {
        printf_s("ParsePresenceMap: expected 1 but was %d", manager->CurrentPos() - manager->Buffer());
        throw;
    }
    for (int i = 0; i < 8; i++) { 
        if (manager->PresenceMap()[i] != 0) { 
            printf_s("ParsePresenceMap: expected 0 but was %d", manager->PresenceMap()[i]);
            throw;
        }
    }
    
    for (int j = 1; j < 100;  j++) {
        manager->ResetBuffer();
        for (int l = 0; l < j - 1; l++)  {
            manager->Buffer()[l] = 0x7f;
        }
        manager->Buffer()[j - 1] = 0xff;
        manager->ParsePresenceMap();
        
        if (manager->CurrentPos() - manager->Buffer() != j) {
            printf_s("ParsePresenceMap: expected %d but was %d", j, manager->CurrentPos() - manager->Buffer());
            throw;
        }

        for (int i = 0; i < 7 * j; i++) { 
            if (manager->PresenceMap()[i] != 1) {
                printf_s("ParsePresenceMap: expected 1 but was %d", manager->PresenceMap()[i]);
                throw;
            }
        }
    }
    
    delete manager;*/
}

#endif //TEST